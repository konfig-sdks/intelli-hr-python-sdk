# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from intelli_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from intelli_hr_python_sdk.api_response import AsyncGeneratorResponse
from intelli_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401

from intelli_hr_python_sdk.model.people_create_request_phone_numbers import PeopleCreateRequestPhoneNumbers as PeopleCreateRequestPhoneNumbersSchema
from intelli_hr_python_sdk.model.people_create_request_work_right import PeopleCreateRequestWorkRight as PeopleCreateRequestWorkRightSchema
from intelli_hr_python_sdk.model.people_create_request_email_addresses import PeopleCreateRequestEmailAddresses as PeopleCreateRequestEmailAddressesSchema
from intelli_hr_python_sdk.model.people_create_request_medical_conditions import PeopleCreateRequestMedicalConditions as PeopleCreateRequestMedicalConditionsSchema
from intelli_hr_python_sdk.model.people_create_request_emergency_contact import PeopleCreateRequestEmergencyContact as PeopleCreateRequestEmergencyContactSchema
from intelli_hr_python_sdk.model.people_create_request import PeopleCreateRequest as PeopleCreateRequestSchema
from intelli_hr_python_sdk.model.people_create_request_addresses import PeopleCreateRequestAddresses as PeopleCreateRequestAddressesSchema
from intelli_hr_python_sdk.model.people_create_request_custom_fields import PeopleCreateRequestCustomFields as PeopleCreateRequestCustomFieldsSchema
from intelli_hr_python_sdk.model.people import People as PeopleSchema

from intelli_hr_python_sdk.type.people_create_request_addresses import PeopleCreateRequestAddresses
from intelli_hr_python_sdk.type.people_create_request_email_addresses import PeopleCreateRequestEmailAddresses
from intelli_hr_python_sdk.type.people import People
from intelli_hr_python_sdk.type.people_create_request_phone_numbers import PeopleCreateRequestPhoneNumbers
from intelli_hr_python_sdk.type.people_create_request_emergency_contact import PeopleCreateRequestEmergencyContact
from intelli_hr_python_sdk.type.people_create_request_work_right import PeopleCreateRequestWorkRight
from intelli_hr_python_sdk.type.people_create_request_custom_fields import PeopleCreateRequestCustomFields
from intelli_hr_python_sdk.type.people_create_request_medical_conditions import PeopleCreateRequestMedicalConditions
from intelli_hr_python_sdk.type.people_create_request import PeopleCreateRequest

from ...api_client import Dictionary
from intelli_hr_python_sdk.pydantic.people_create_request_emergency_contact import PeopleCreateRequestEmergencyContact as PeopleCreateRequestEmergencyContactPydantic
from intelli_hr_python_sdk.pydantic.people_create_request import PeopleCreateRequest as PeopleCreateRequestPydantic
from intelli_hr_python_sdk.pydantic.people_create_request_phone_numbers import PeopleCreateRequestPhoneNumbers as PeopleCreateRequestPhoneNumbersPydantic
from intelli_hr_python_sdk.pydantic.people_create_request_work_right import PeopleCreateRequestWorkRight as PeopleCreateRequestWorkRightPydantic
from intelli_hr_python_sdk.pydantic.people_create_request_addresses import PeopleCreateRequestAddresses as PeopleCreateRequestAddressesPydantic
from intelli_hr_python_sdk.pydantic.people_create_request_custom_fields import PeopleCreateRequestCustomFields as PeopleCreateRequestCustomFieldsPydantic
from intelli_hr_python_sdk.pydantic.people import People as PeoplePydantic
from intelli_hr_python_sdk.pydantic.people_create_request_email_addresses import PeopleCreateRequestEmailAddresses as PeopleCreateRequestEmailAddressesPydantic
from intelli_hr_python_sdk.pydantic.people_create_request_medical_conditions import PeopleCreateRequestMedicalConditions as PeopleCreateRequestMedicalConditionsPydantic

from . import path

# body param
SchemaForRequestBodyApplicationJson = PeopleCreateRequestSchema


request_body_people_create_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'ApiKey',
]
SchemaFor201ResponseBodyApplicationJson = PeopleSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: People


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: People


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
)
_status_code_to_response = {
    '201': _response_for_201,
    '400': _response_for_400,
    '403': _response_for_403,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _create_new_person_mapped_args(
        self,
        last_name: str,
        title: typing.Optional[typing.Union[str, none_type]] = None,
        first_name: typing.Optional[typing.Union[str, none_type]] = None,
        middle_name: typing.Optional[typing.Union[str, none_type]] = None,
        preferred_name: typing.Optional[typing.Union[str, none_type]] = None,
        date_of_birth: typing.Optional[typing.Union[str, none_type]] = None,
        gender: typing.Optional[str] = None,
        employee_number: typing.Optional[typing.Union[str, none_type]] = None,
        emergency_contact: typing.Optional[PeopleCreateRequestEmergencyContact] = None,
        primary_email_address: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        primary_phone_number: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        email_addresses: typing.Optional[PeopleCreateRequestEmailAddresses] = None,
        phone_numbers: typing.Optional[PeopleCreateRequestPhoneNumbers] = None,
        addresses: typing.Optional[PeopleCreateRequestAddresses] = None,
        custom_fields: typing.Optional[PeopleCreateRequestCustomFields] = None,
        medical_conditions: typing.Optional[PeopleCreateRequestMedicalConditions] = None,
        work_right: typing.Optional[PeopleCreateRequestWorkRight] = None,
        work_right_expiry_date: typing.Optional[typing.Union[str, none_type]] = None,
        user_account: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if title is not None:
            _body["title"] = title
        if first_name is not None:
            _body["firstName"] = first_name
        if middle_name is not None:
            _body["middleName"] = middle_name
        if last_name is not None:
            _body["lastName"] = last_name
        if preferred_name is not None:
            _body["preferredName"] = preferred_name
        if date_of_birth is not None:
            _body["dateOfBirth"] = date_of_birth
        if gender is not None:
            _body["gender"] = gender
        if employee_number is not None:
            _body["employeeNumber"] = employee_number
        if emergency_contact is not None:
            _body["emergencyContact"] = emergency_contact
        if primary_email_address is not None:
            _body["primaryEmailAddress"] = primary_email_address
        if primary_phone_number is not None:
            _body["primaryPhoneNumber"] = primary_phone_number
        if email_addresses is not None:
            _body["emailAddresses"] = email_addresses
        if phone_numbers is not None:
            _body["phoneNumbers"] = phone_numbers
        if addresses is not None:
            _body["addresses"] = addresses
        if custom_fields is not None:
            _body["customFields"] = custom_fields
        if medical_conditions is not None:
            _body["medicalConditions"] = medical_conditions
        if work_right is not None:
            _body["workRight"] = work_right
        if work_right_expiry_date is not None:
            _body["workRightExpiryDate"] = work_right_expiry_date
        if user_account is not None:
            _body["userAccount"] = user_account
        args.body = _body
        return args

    async def _acreate_new_person_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/people',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_people_create_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_new_person_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/people',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_people_create_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateNewPersonRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_new_person(
        self,
        last_name: str,
        title: typing.Optional[typing.Union[str, none_type]] = None,
        first_name: typing.Optional[typing.Union[str, none_type]] = None,
        middle_name: typing.Optional[typing.Union[str, none_type]] = None,
        preferred_name: typing.Optional[typing.Union[str, none_type]] = None,
        date_of_birth: typing.Optional[typing.Union[str, none_type]] = None,
        gender: typing.Optional[str] = None,
        employee_number: typing.Optional[typing.Union[str, none_type]] = None,
        emergency_contact: typing.Optional[PeopleCreateRequestEmergencyContact] = None,
        primary_email_address: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        primary_phone_number: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        email_addresses: typing.Optional[PeopleCreateRequestEmailAddresses] = None,
        phone_numbers: typing.Optional[PeopleCreateRequestPhoneNumbers] = None,
        addresses: typing.Optional[PeopleCreateRequestAddresses] = None,
        custom_fields: typing.Optional[PeopleCreateRequestCustomFields] = None,
        medical_conditions: typing.Optional[PeopleCreateRequestMedicalConditions] = None,
        work_right: typing.Optional[PeopleCreateRequestWorkRight] = None,
        work_right_expiry_date: typing.Optional[typing.Union[str, none_type]] = None,
        user_account: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_person_mapped_args(
            last_name=last_name,
            title=title,
            first_name=first_name,
            middle_name=middle_name,
            preferred_name=preferred_name,
            date_of_birth=date_of_birth,
            gender=gender,
            employee_number=employee_number,
            emergency_contact=emergency_contact,
            primary_email_address=primary_email_address,
            primary_phone_number=primary_phone_number,
            email_addresses=email_addresses,
            phone_numbers=phone_numbers,
            addresses=addresses,
            custom_fields=custom_fields,
            medical_conditions=medical_conditions,
            work_right=work_right,
            work_right_expiry_date=work_right_expiry_date,
            user_account=user_account,
        )
        return await self._acreate_new_person_oapg(
            body=args.body,
            **kwargs,
        )
    
    def create_new_person(
        self,
        last_name: str,
        title: typing.Optional[typing.Union[str, none_type]] = None,
        first_name: typing.Optional[typing.Union[str, none_type]] = None,
        middle_name: typing.Optional[typing.Union[str, none_type]] = None,
        preferred_name: typing.Optional[typing.Union[str, none_type]] = None,
        date_of_birth: typing.Optional[typing.Union[str, none_type]] = None,
        gender: typing.Optional[str] = None,
        employee_number: typing.Optional[typing.Union[str, none_type]] = None,
        emergency_contact: typing.Optional[PeopleCreateRequestEmergencyContact] = None,
        primary_email_address: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        primary_phone_number: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        email_addresses: typing.Optional[PeopleCreateRequestEmailAddresses] = None,
        phone_numbers: typing.Optional[PeopleCreateRequestPhoneNumbers] = None,
        addresses: typing.Optional[PeopleCreateRequestAddresses] = None,
        custom_fields: typing.Optional[PeopleCreateRequestCustomFields] = None,
        medical_conditions: typing.Optional[PeopleCreateRequestMedicalConditions] = None,
        work_right: typing.Optional[PeopleCreateRequestWorkRight] = None,
        work_right_expiry_date: typing.Optional[typing.Union[str, none_type]] = None,
        user_account: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_person_mapped_args(
            last_name=last_name,
            title=title,
            first_name=first_name,
            middle_name=middle_name,
            preferred_name=preferred_name,
            date_of_birth=date_of_birth,
            gender=gender,
            employee_number=employee_number,
            emergency_contact=emergency_contact,
            primary_email_address=primary_email_address,
            primary_phone_number=primary_phone_number,
            email_addresses=email_addresses,
            phone_numbers=phone_numbers,
            addresses=addresses,
            custom_fields=custom_fields,
            medical_conditions=medical_conditions,
            work_right=work_right,
            work_right_expiry_date=work_right_expiry_date,
            user_account=user_account,
        )
        return self._create_new_person_oapg(
            body=args.body,
        )

class CreateNewPerson(BaseApi):

    async def acreate_new_person(
        self,
        last_name: str,
        title: typing.Optional[typing.Union[str, none_type]] = None,
        first_name: typing.Optional[typing.Union[str, none_type]] = None,
        middle_name: typing.Optional[typing.Union[str, none_type]] = None,
        preferred_name: typing.Optional[typing.Union[str, none_type]] = None,
        date_of_birth: typing.Optional[typing.Union[str, none_type]] = None,
        gender: typing.Optional[str] = None,
        employee_number: typing.Optional[typing.Union[str, none_type]] = None,
        emergency_contact: typing.Optional[PeopleCreateRequestEmergencyContact] = None,
        primary_email_address: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        primary_phone_number: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        email_addresses: typing.Optional[PeopleCreateRequestEmailAddresses] = None,
        phone_numbers: typing.Optional[PeopleCreateRequestPhoneNumbers] = None,
        addresses: typing.Optional[PeopleCreateRequestAddresses] = None,
        custom_fields: typing.Optional[PeopleCreateRequestCustomFields] = None,
        medical_conditions: typing.Optional[PeopleCreateRequestMedicalConditions] = None,
        work_right: typing.Optional[PeopleCreateRequestWorkRight] = None,
        work_right_expiry_date: typing.Optional[typing.Union[str, none_type]] = None,
        user_account: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        validate: bool = False,
        **kwargs,
    ) -> PeoplePydantic:
        raw_response = await self.raw.acreate_new_person(
            last_name=last_name,
            title=title,
            first_name=first_name,
            middle_name=middle_name,
            preferred_name=preferred_name,
            date_of_birth=date_of_birth,
            gender=gender,
            employee_number=employee_number,
            emergency_contact=emergency_contact,
            primary_email_address=primary_email_address,
            primary_phone_number=primary_phone_number,
            email_addresses=email_addresses,
            phone_numbers=phone_numbers,
            addresses=addresses,
            custom_fields=custom_fields,
            medical_conditions=medical_conditions,
            work_right=work_right,
            work_right_expiry_date=work_right_expiry_date,
            user_account=user_account,
            **kwargs,
        )
        if validate:
            return PeoplePydantic(**raw_response.body)
        return api_client.construct_model_instance(PeoplePydantic, raw_response.body)
    
    
    def create_new_person(
        self,
        last_name: str,
        title: typing.Optional[typing.Union[str, none_type]] = None,
        first_name: typing.Optional[typing.Union[str, none_type]] = None,
        middle_name: typing.Optional[typing.Union[str, none_type]] = None,
        preferred_name: typing.Optional[typing.Union[str, none_type]] = None,
        date_of_birth: typing.Optional[typing.Union[str, none_type]] = None,
        gender: typing.Optional[str] = None,
        employee_number: typing.Optional[typing.Union[str, none_type]] = None,
        emergency_contact: typing.Optional[PeopleCreateRequestEmergencyContact] = None,
        primary_email_address: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        primary_phone_number: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        email_addresses: typing.Optional[PeopleCreateRequestEmailAddresses] = None,
        phone_numbers: typing.Optional[PeopleCreateRequestPhoneNumbers] = None,
        addresses: typing.Optional[PeopleCreateRequestAddresses] = None,
        custom_fields: typing.Optional[PeopleCreateRequestCustomFields] = None,
        medical_conditions: typing.Optional[PeopleCreateRequestMedicalConditions] = None,
        work_right: typing.Optional[PeopleCreateRequestWorkRight] = None,
        work_right_expiry_date: typing.Optional[typing.Union[str, none_type]] = None,
        user_account: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        validate: bool = False,
    ) -> PeoplePydantic:
        raw_response = self.raw.create_new_person(
            last_name=last_name,
            title=title,
            first_name=first_name,
            middle_name=middle_name,
            preferred_name=preferred_name,
            date_of_birth=date_of_birth,
            gender=gender,
            employee_number=employee_number,
            emergency_contact=emergency_contact,
            primary_email_address=primary_email_address,
            primary_phone_number=primary_phone_number,
            email_addresses=email_addresses,
            phone_numbers=phone_numbers,
            addresses=addresses,
            custom_fields=custom_fields,
            medical_conditions=medical_conditions,
            work_right=work_right,
            work_right_expiry_date=work_right_expiry_date,
            user_account=user_account,
        )
        if validate:
            return PeoplePydantic(**raw_response.body)
        return api_client.construct_model_instance(PeoplePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        last_name: str,
        title: typing.Optional[typing.Union[str, none_type]] = None,
        first_name: typing.Optional[typing.Union[str, none_type]] = None,
        middle_name: typing.Optional[typing.Union[str, none_type]] = None,
        preferred_name: typing.Optional[typing.Union[str, none_type]] = None,
        date_of_birth: typing.Optional[typing.Union[str, none_type]] = None,
        gender: typing.Optional[str] = None,
        employee_number: typing.Optional[typing.Union[str, none_type]] = None,
        emergency_contact: typing.Optional[PeopleCreateRequestEmergencyContact] = None,
        primary_email_address: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        primary_phone_number: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        email_addresses: typing.Optional[PeopleCreateRequestEmailAddresses] = None,
        phone_numbers: typing.Optional[PeopleCreateRequestPhoneNumbers] = None,
        addresses: typing.Optional[PeopleCreateRequestAddresses] = None,
        custom_fields: typing.Optional[PeopleCreateRequestCustomFields] = None,
        medical_conditions: typing.Optional[PeopleCreateRequestMedicalConditions] = None,
        work_right: typing.Optional[PeopleCreateRequestWorkRight] = None,
        work_right_expiry_date: typing.Optional[typing.Union[str, none_type]] = None,
        user_account: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_person_mapped_args(
            last_name=last_name,
            title=title,
            first_name=first_name,
            middle_name=middle_name,
            preferred_name=preferred_name,
            date_of_birth=date_of_birth,
            gender=gender,
            employee_number=employee_number,
            emergency_contact=emergency_contact,
            primary_email_address=primary_email_address,
            primary_phone_number=primary_phone_number,
            email_addresses=email_addresses,
            phone_numbers=phone_numbers,
            addresses=addresses,
            custom_fields=custom_fields,
            medical_conditions=medical_conditions,
            work_right=work_right,
            work_right_expiry_date=work_right_expiry_date,
            user_account=user_account,
        )
        return await self._acreate_new_person_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        last_name: str,
        title: typing.Optional[typing.Union[str, none_type]] = None,
        first_name: typing.Optional[typing.Union[str, none_type]] = None,
        middle_name: typing.Optional[typing.Union[str, none_type]] = None,
        preferred_name: typing.Optional[typing.Union[str, none_type]] = None,
        date_of_birth: typing.Optional[typing.Union[str, none_type]] = None,
        gender: typing.Optional[str] = None,
        employee_number: typing.Optional[typing.Union[str, none_type]] = None,
        emergency_contact: typing.Optional[PeopleCreateRequestEmergencyContact] = None,
        primary_email_address: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        primary_phone_number: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
        email_addresses: typing.Optional[PeopleCreateRequestEmailAddresses] = None,
        phone_numbers: typing.Optional[PeopleCreateRequestPhoneNumbers] = None,
        addresses: typing.Optional[PeopleCreateRequestAddresses] = None,
        custom_fields: typing.Optional[PeopleCreateRequestCustomFields] = None,
        medical_conditions: typing.Optional[PeopleCreateRequestMedicalConditions] = None,
        work_right: typing.Optional[PeopleCreateRequestWorkRight] = None,
        work_right_expiry_date: typing.Optional[typing.Union[str, none_type]] = None,
        user_account: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_person_mapped_args(
            last_name=last_name,
            title=title,
            first_name=first_name,
            middle_name=middle_name,
            preferred_name=preferred_name,
            date_of_birth=date_of_birth,
            gender=gender,
            employee_number=employee_number,
            emergency_contact=emergency_contact,
            primary_email_address=primary_email_address,
            primary_phone_number=primary_phone_number,
            email_addresses=email_addresses,
            phone_numbers=phone_numbers,
            addresses=addresses,
            custom_fields=custom_fields,
            medical_conditions=medical_conditions,
            work_right=work_right,
            work_right_expiry_date=work_right_expiry_date,
            user_account=user_account,
        )
        return self._create_new_person_oapg(
            body=args.body,
        )

