# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from intelli_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from intelli_hr_python_sdk.api_response import AsyncGeneratorResponse
from intelli_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401

from intelli_hr_python_sdk.model.job_patch_request_work_type import JobPatchRequestWorkType as JobPatchRequestWorkTypeSchema
from intelli_hr_python_sdk.model.job_patch_request_business_entity import JobPatchRequestBusinessEntity as JobPatchRequestBusinessEntitySchema
from intelli_hr_python_sdk.model.job_patch_request_supervisor_job import JobPatchRequestSupervisorJob as JobPatchRequestSupervisorJobSchema
from intelli_hr_python_sdk.model.job_patch_response import JobPatchResponse as JobPatchResponseSchema
from intelli_hr_python_sdk.model.job_patch_request_work_class import JobPatchRequestWorkClass as JobPatchRequestWorkClassSchema
from intelli_hr_python_sdk.model.job_patch_request_establishment import JobPatchRequestEstablishment as JobPatchRequestEstablishmentSchema
from intelli_hr_python_sdk.model.job_patch_request_remuneration_schedule import JobPatchRequestRemunerationSchedule as JobPatchRequestRemunerationScheduleSchema
from intelli_hr_python_sdk.model.job_patch_request_location import JobPatchRequestLocation as JobPatchRequestLocationSchema
from intelli_hr_python_sdk.model.job_patch_request_business_unit import JobPatchRequestBusinessUnit as JobPatchRequestBusinessUnitSchema
from intelli_hr_python_sdk.model.job_patch_request_custom_fields import JobPatchRequestCustomFields as JobPatchRequestCustomFieldsSchema
from intelli_hr_python_sdk.model.job_patch_request_employment_condition import JobPatchRequestEmploymentCondition as JobPatchRequestEmploymentConditionSchema
from intelli_hr_python_sdk.model.job_patch_request_pay_grade import JobPatchRequestPayGrade as JobPatchRequestPayGradeSchema
from intelli_hr_python_sdk.model.job_patch_request_supervisor_person import JobPatchRequestSupervisorPerson as JobPatchRequestSupervisorPersonSchema
from intelli_hr_python_sdk.model.job_patch_request_job_change_reason import JobPatchRequestJobChangeReason as JobPatchRequestJobChangeReasonSchema
from intelli_hr_python_sdk.model.job_patch_request import JobPatchRequest as JobPatchRequestSchema

from intelli_hr_python_sdk.type.job_patch_request_job_change_reason import JobPatchRequestJobChangeReason
from intelli_hr_python_sdk.type.job_patch_request_work_type import JobPatchRequestWorkType
from intelli_hr_python_sdk.type.job_patch_request_pay_grade import JobPatchRequestPayGrade
from intelli_hr_python_sdk.type.job_patch_request_supervisor_person import JobPatchRequestSupervisorPerson
from intelli_hr_python_sdk.type.job_patch_request_work_class import JobPatchRequestWorkClass
from intelli_hr_python_sdk.type.job_patch_request_business_entity import JobPatchRequestBusinessEntity
from intelli_hr_python_sdk.type.job_patch_response import JobPatchResponse
from intelli_hr_python_sdk.type.job_patch_request_custom_fields import JobPatchRequestCustomFields
from intelli_hr_python_sdk.type.job_patch_request_location import JobPatchRequestLocation
from intelli_hr_python_sdk.type.job_patch_request_remuneration_schedule import JobPatchRequestRemunerationSchedule
from intelli_hr_python_sdk.type.job_patch_request import JobPatchRequest
from intelli_hr_python_sdk.type.job_patch_request_establishment import JobPatchRequestEstablishment
from intelli_hr_python_sdk.type.job_patch_request_business_unit import JobPatchRequestBusinessUnit
from intelli_hr_python_sdk.type.job_patch_request_supervisor_job import JobPatchRequestSupervisorJob
from intelli_hr_python_sdk.type.job_patch_request_employment_condition import JobPatchRequestEmploymentCondition

from ...api_client import Dictionary
from intelli_hr_python_sdk.pydantic.job_patch_request_employment_condition import JobPatchRequestEmploymentCondition as JobPatchRequestEmploymentConditionPydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_supervisor_person import JobPatchRequestSupervisorPerson as JobPatchRequestSupervisorPersonPydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_supervisor_job import JobPatchRequestSupervisorJob as JobPatchRequestSupervisorJobPydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_business_entity import JobPatchRequestBusinessEntity as JobPatchRequestBusinessEntityPydantic
from intelli_hr_python_sdk.pydantic.job_patch_response import JobPatchResponse as JobPatchResponsePydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_job_change_reason import JobPatchRequestJobChangeReason as JobPatchRequestJobChangeReasonPydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_pay_grade import JobPatchRequestPayGrade as JobPatchRequestPayGradePydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_establishment import JobPatchRequestEstablishment as JobPatchRequestEstablishmentPydantic
from intelli_hr_python_sdk.pydantic.job_patch_request import JobPatchRequest as JobPatchRequestPydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_remuneration_schedule import JobPatchRequestRemunerationSchedule as JobPatchRequestRemunerationSchedulePydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_business_unit import JobPatchRequestBusinessUnit as JobPatchRequestBusinessUnitPydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_work_type import JobPatchRequestWorkType as JobPatchRequestWorkTypePydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_custom_fields import JobPatchRequestCustomFields as JobPatchRequestCustomFieldsPydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_work_class import JobPatchRequestWorkClass as JobPatchRequestWorkClassPydantic
from intelli_hr_python_sdk.pydantic.job_patch_request_location import JobPatchRequestLocation as JobPatchRequestLocationPydantic

# body param
SchemaForRequestBodyApplicationJson = JobPatchRequestSchema


request_body_job_patch_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = JobPatchResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: JobPatchResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: JobPatchResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _update_attributes_mapped_args(
        self,
        effective_from: typing.Union[str, none_type],
        effective_to: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        business_entity: typing.Optional[JobPatchRequestBusinessEntity] = None,
        business_unit: typing.Optional[JobPatchRequestBusinessUnit] = None,
        establishment: typing.Optional[JobPatchRequestEstablishment] = None,
        job_change_reason: typing.Optional[JobPatchRequestJobChangeReason] = None,
        supervisor_person: typing.Optional[JobPatchRequestSupervisorPerson] = None,
        supervisor_job: typing.Optional[JobPatchRequestSupervisorJob] = None,
        location: typing.Optional[JobPatchRequestLocation] = None,
        work_class: typing.Optional[JobPatchRequestWorkClass] = None,
        work_type: typing.Optional[JobPatchRequestWorkType] = None,
        fte: typing.Optional[str] = None,
        pay_grade: typing.Optional[JobPatchRequestPayGrade] = None,
        employment_condition: typing.Optional[JobPatchRequestEmploymentCondition] = None,
        remuneration_schedule: typing.Optional[JobPatchRequestRemunerationSchedule] = None,
        custom_fields: typing.Optional[JobPatchRequestCustomFields] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if effective_from is not None:
            _body["effectiveFrom"] = effective_from
        if effective_to is not None:
            _body["effectiveTo"] = effective_to
        if name is not None:
            _body["name"] = name
        if business_entity is not None:
            _body["businessEntity"] = business_entity
        if business_unit is not None:
            _body["businessUnit"] = business_unit
        if establishment is not None:
            _body["establishment"] = establishment
        if job_change_reason is not None:
            _body["jobChangeReason"] = job_change_reason
        if supervisor_person is not None:
            _body["supervisorPerson"] = supervisor_person
        if supervisor_job is not None:
            _body["supervisorJob"] = supervisor_job
        if location is not None:
            _body["location"] = location
        if work_class is not None:
            _body["workClass"] = work_class
        if work_type is not None:
            _body["workType"] = work_type
        if fte is not None:
            _body["fte"] = fte
        if pay_grade is not None:
            _body["payGrade"] = pay_grade
        if employment_condition is not None:
            _body["employmentCondition"] = employment_condition
        if remuneration_schedule is not None:
            _body["remunerationSchedule"] = remuneration_schedule
        if custom_fields is not None:
            _body["customFields"] = custom_fields
        args.body = _body
        return args

    async def _aupdate_attributes_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Patch an existing Job
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'patch'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/jobs/{id}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_job_patch_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_attributes_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Patch an existing Job
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'patch'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/jobs/{id}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_job_patch_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateAttributesRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_attributes(
        self,
        effective_from: typing.Union[str, none_type],
        effective_to: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        business_entity: typing.Optional[JobPatchRequestBusinessEntity] = None,
        business_unit: typing.Optional[JobPatchRequestBusinessUnit] = None,
        establishment: typing.Optional[JobPatchRequestEstablishment] = None,
        job_change_reason: typing.Optional[JobPatchRequestJobChangeReason] = None,
        supervisor_person: typing.Optional[JobPatchRequestSupervisorPerson] = None,
        supervisor_job: typing.Optional[JobPatchRequestSupervisorJob] = None,
        location: typing.Optional[JobPatchRequestLocation] = None,
        work_class: typing.Optional[JobPatchRequestWorkClass] = None,
        work_type: typing.Optional[JobPatchRequestWorkType] = None,
        fte: typing.Optional[str] = None,
        pay_grade: typing.Optional[JobPatchRequestPayGrade] = None,
        employment_condition: typing.Optional[JobPatchRequestEmploymentCondition] = None,
        remuneration_schedule: typing.Optional[JobPatchRequestRemunerationSchedule] = None,
        custom_fields: typing.Optional[JobPatchRequestCustomFields] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_attributes_mapped_args(
            effective_from=effective_from,
            effective_to=effective_to,
            name=name,
            business_entity=business_entity,
            business_unit=business_unit,
            establishment=establishment,
            job_change_reason=job_change_reason,
            supervisor_person=supervisor_person,
            supervisor_job=supervisor_job,
            location=location,
            work_class=work_class,
            work_type=work_type,
            fte=fte,
            pay_grade=pay_grade,
            employment_condition=employment_condition,
            remuneration_schedule=remuneration_schedule,
            custom_fields=custom_fields,
        )
        return await self._aupdate_attributes_oapg(
            body=args.body,
            **kwargs,
        )
    
    def update_attributes(
        self,
        effective_from: typing.Union[str, none_type],
        effective_to: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        business_entity: typing.Optional[JobPatchRequestBusinessEntity] = None,
        business_unit: typing.Optional[JobPatchRequestBusinessUnit] = None,
        establishment: typing.Optional[JobPatchRequestEstablishment] = None,
        job_change_reason: typing.Optional[JobPatchRequestJobChangeReason] = None,
        supervisor_person: typing.Optional[JobPatchRequestSupervisorPerson] = None,
        supervisor_job: typing.Optional[JobPatchRequestSupervisorJob] = None,
        location: typing.Optional[JobPatchRequestLocation] = None,
        work_class: typing.Optional[JobPatchRequestWorkClass] = None,
        work_type: typing.Optional[JobPatchRequestWorkType] = None,
        fte: typing.Optional[str] = None,
        pay_grade: typing.Optional[JobPatchRequestPayGrade] = None,
        employment_condition: typing.Optional[JobPatchRequestEmploymentCondition] = None,
        remuneration_schedule: typing.Optional[JobPatchRequestRemunerationSchedule] = None,
        custom_fields: typing.Optional[JobPatchRequestCustomFields] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_attributes_mapped_args(
            effective_from=effective_from,
            effective_to=effective_to,
            name=name,
            business_entity=business_entity,
            business_unit=business_unit,
            establishment=establishment,
            job_change_reason=job_change_reason,
            supervisor_person=supervisor_person,
            supervisor_job=supervisor_job,
            location=location,
            work_class=work_class,
            work_type=work_type,
            fte=fte,
            pay_grade=pay_grade,
            employment_condition=employment_condition,
            remuneration_schedule=remuneration_schedule,
            custom_fields=custom_fields,
        )
        return self._update_attributes_oapg(
            body=args.body,
        )

class UpdateAttributes(BaseApi):

    async def aupdate_attributes(
        self,
        effective_from: typing.Union[str, none_type],
        effective_to: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        business_entity: typing.Optional[JobPatchRequestBusinessEntity] = None,
        business_unit: typing.Optional[JobPatchRequestBusinessUnit] = None,
        establishment: typing.Optional[JobPatchRequestEstablishment] = None,
        job_change_reason: typing.Optional[JobPatchRequestJobChangeReason] = None,
        supervisor_person: typing.Optional[JobPatchRequestSupervisorPerson] = None,
        supervisor_job: typing.Optional[JobPatchRequestSupervisorJob] = None,
        location: typing.Optional[JobPatchRequestLocation] = None,
        work_class: typing.Optional[JobPatchRequestWorkClass] = None,
        work_type: typing.Optional[JobPatchRequestWorkType] = None,
        fte: typing.Optional[str] = None,
        pay_grade: typing.Optional[JobPatchRequestPayGrade] = None,
        employment_condition: typing.Optional[JobPatchRequestEmploymentCondition] = None,
        remuneration_schedule: typing.Optional[JobPatchRequestRemunerationSchedule] = None,
        custom_fields: typing.Optional[JobPatchRequestCustomFields] = None,
        validate: bool = False,
        **kwargs,
    ) -> JobPatchResponsePydantic:
        raw_response = await self.raw.aupdate_attributes(
            effective_from=effective_from,
            effective_to=effective_to,
            name=name,
            business_entity=business_entity,
            business_unit=business_unit,
            establishment=establishment,
            job_change_reason=job_change_reason,
            supervisor_person=supervisor_person,
            supervisor_job=supervisor_job,
            location=location,
            work_class=work_class,
            work_type=work_type,
            fte=fte,
            pay_grade=pay_grade,
            employment_condition=employment_condition,
            remuneration_schedule=remuneration_schedule,
            custom_fields=custom_fields,
            **kwargs,
        )
        if validate:
            return JobPatchResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(JobPatchResponsePydantic, raw_response.body)
    
    
    def update_attributes(
        self,
        effective_from: typing.Union[str, none_type],
        effective_to: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        business_entity: typing.Optional[JobPatchRequestBusinessEntity] = None,
        business_unit: typing.Optional[JobPatchRequestBusinessUnit] = None,
        establishment: typing.Optional[JobPatchRequestEstablishment] = None,
        job_change_reason: typing.Optional[JobPatchRequestJobChangeReason] = None,
        supervisor_person: typing.Optional[JobPatchRequestSupervisorPerson] = None,
        supervisor_job: typing.Optional[JobPatchRequestSupervisorJob] = None,
        location: typing.Optional[JobPatchRequestLocation] = None,
        work_class: typing.Optional[JobPatchRequestWorkClass] = None,
        work_type: typing.Optional[JobPatchRequestWorkType] = None,
        fte: typing.Optional[str] = None,
        pay_grade: typing.Optional[JobPatchRequestPayGrade] = None,
        employment_condition: typing.Optional[JobPatchRequestEmploymentCondition] = None,
        remuneration_schedule: typing.Optional[JobPatchRequestRemunerationSchedule] = None,
        custom_fields: typing.Optional[JobPatchRequestCustomFields] = None,
        validate: bool = False,
    ) -> JobPatchResponsePydantic:
        raw_response = self.raw.update_attributes(
            effective_from=effective_from,
            effective_to=effective_to,
            name=name,
            business_entity=business_entity,
            business_unit=business_unit,
            establishment=establishment,
            job_change_reason=job_change_reason,
            supervisor_person=supervisor_person,
            supervisor_job=supervisor_job,
            location=location,
            work_class=work_class,
            work_type=work_type,
            fte=fte,
            pay_grade=pay_grade,
            employment_condition=employment_condition,
            remuneration_schedule=remuneration_schedule,
            custom_fields=custom_fields,
        )
        if validate:
            return JobPatchResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(JobPatchResponsePydantic, raw_response.body)


class ApiForpatch(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apatch(
        self,
        effective_from: typing.Union[str, none_type],
        effective_to: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        business_entity: typing.Optional[JobPatchRequestBusinessEntity] = None,
        business_unit: typing.Optional[JobPatchRequestBusinessUnit] = None,
        establishment: typing.Optional[JobPatchRequestEstablishment] = None,
        job_change_reason: typing.Optional[JobPatchRequestJobChangeReason] = None,
        supervisor_person: typing.Optional[JobPatchRequestSupervisorPerson] = None,
        supervisor_job: typing.Optional[JobPatchRequestSupervisorJob] = None,
        location: typing.Optional[JobPatchRequestLocation] = None,
        work_class: typing.Optional[JobPatchRequestWorkClass] = None,
        work_type: typing.Optional[JobPatchRequestWorkType] = None,
        fte: typing.Optional[str] = None,
        pay_grade: typing.Optional[JobPatchRequestPayGrade] = None,
        employment_condition: typing.Optional[JobPatchRequestEmploymentCondition] = None,
        remuneration_schedule: typing.Optional[JobPatchRequestRemunerationSchedule] = None,
        custom_fields: typing.Optional[JobPatchRequestCustomFields] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_attributes_mapped_args(
            effective_from=effective_from,
            effective_to=effective_to,
            name=name,
            business_entity=business_entity,
            business_unit=business_unit,
            establishment=establishment,
            job_change_reason=job_change_reason,
            supervisor_person=supervisor_person,
            supervisor_job=supervisor_job,
            location=location,
            work_class=work_class,
            work_type=work_type,
            fte=fte,
            pay_grade=pay_grade,
            employment_condition=employment_condition,
            remuneration_schedule=remuneration_schedule,
            custom_fields=custom_fields,
        )
        return await self._aupdate_attributes_oapg(
            body=args.body,
            **kwargs,
        )
    
    def patch(
        self,
        effective_from: typing.Union[str, none_type],
        effective_to: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        business_entity: typing.Optional[JobPatchRequestBusinessEntity] = None,
        business_unit: typing.Optional[JobPatchRequestBusinessUnit] = None,
        establishment: typing.Optional[JobPatchRequestEstablishment] = None,
        job_change_reason: typing.Optional[JobPatchRequestJobChangeReason] = None,
        supervisor_person: typing.Optional[JobPatchRequestSupervisorPerson] = None,
        supervisor_job: typing.Optional[JobPatchRequestSupervisorJob] = None,
        location: typing.Optional[JobPatchRequestLocation] = None,
        work_class: typing.Optional[JobPatchRequestWorkClass] = None,
        work_type: typing.Optional[JobPatchRequestWorkType] = None,
        fte: typing.Optional[str] = None,
        pay_grade: typing.Optional[JobPatchRequestPayGrade] = None,
        employment_condition: typing.Optional[JobPatchRequestEmploymentCondition] = None,
        remuneration_schedule: typing.Optional[JobPatchRequestRemunerationSchedule] = None,
        custom_fields: typing.Optional[JobPatchRequestCustomFields] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_attributes_mapped_args(
            effective_from=effective_from,
            effective_to=effective_to,
            name=name,
            business_entity=business_entity,
            business_unit=business_unit,
            establishment=establishment,
            job_change_reason=job_change_reason,
            supervisor_person=supervisor_person,
            supervisor_job=supervisor_job,
            location=location,
            work_class=work_class,
            work_type=work_type,
            fte=fte,
            pay_grade=pay_grade,
            employment_condition=employment_condition,
            remuneration_schedule=remuneration_schedule,
            custom_fields=custom_fields,
        )
        return self._update_attributes_oapg(
            body=args.body,
        )

