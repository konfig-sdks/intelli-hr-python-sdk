# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class PersonIdImageCreateResponseDataFields(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            x_amz_server_side_encryption = schemas.StrSchema
            key = schemas.StrSchema
            AWSAccessKeyId = schemas.StrSchema
            x_amz_security_token = schemas.StrSchema
            policy = schemas.StrSchema
            signature = schemas.StrSchema
            __annotations__ = {
                "x-amz-server-side-encryption": x_amz_server_side_encryption,
                "key": key,
                "AWSAccessKeyId": AWSAccessKeyId,
                "x-amz-security-token": x_amz_security_token,
                "policy": policy,
                "signature": signature,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x-amz-server-side-encryption"]) -> MetaOapg.properties.x_amz_server_side_encryption: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AWSAccessKeyId"]) -> MetaOapg.properties.AWSAccessKeyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x-amz-security-token"]) -> MetaOapg.properties.x_amz_security_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy"]) -> MetaOapg.properties.policy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["x-amz-server-side-encryption", "key", "AWSAccessKeyId", "x-amz-security-token", "policy", "signature", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x-amz-server-side-encryption"]) -> typing.Union[MetaOapg.properties.x_amz_server_side_encryption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AWSAccessKeyId"]) -> typing.Union[MetaOapg.properties.AWSAccessKeyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x-amz-security-token"]) -> typing.Union[MetaOapg.properties.x_amz_security_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy"]) -> typing.Union[MetaOapg.properties.policy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signature"]) -> typing.Union[MetaOapg.properties.signature, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["x-amz-server-side-encryption", "key", "AWSAccessKeyId", "x-amz-security-token", "policy", "signature", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
        AWSAccessKeyId: typing.Union[MetaOapg.properties.AWSAccessKeyId, str, schemas.Unset] = schemas.unset,
        policy: typing.Union[MetaOapg.properties.policy, str, schemas.Unset] = schemas.unset,
        signature: typing.Union[MetaOapg.properties.signature, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PersonIdImageCreateResponseDataFields':
        return super().__new__(
            cls,
            *args,
            key=key,
            AWSAccessKeyId=AWSAccessKeyId,
            policy=policy,
            signature=signature,
            _configuration=_configuration,
            **kwargs,
        )
