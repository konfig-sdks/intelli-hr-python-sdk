# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class PeopleCreateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "lastName",
        }
        
        class properties:
            lastName = schemas.StrSchema
            
            
            class title(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'title':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class firstName(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'firstName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class middleName(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'middleName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class preferredName(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'preferredName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class dateOfBirth(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'dateOfBirth':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            gender = schemas.StrSchema
            
            
            class employeeNumber(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'employeeNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def emergencyContact() -> typing.Type['PeopleCreateRequestEmergencyContact']:
                return PeopleCreateRequestEmergencyContact
            
            
            class primaryEmailAddress(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                email = schemas.StrSchema
                                isPersonal = schemas.BoolSchema
                                __annotations__ = {
                                    "email": email,
                                    "isPersonal": isPersonal,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isPersonal"]) -> MetaOapg.properties.isPersonal: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "isPersonal", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isPersonal"]) -> typing.Union[MetaOapg.properties.isPersonal, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "isPersonal", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                            isPersonal: typing.Union[MetaOapg.properties.isPersonal, bool, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                email=email,
                                isPersonal=isPersonal,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'primaryEmailAddress':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class primaryPhoneNumber(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                phone = schemas.StrSchema
                                number = schemas.StrSchema
                                isPersonal = schemas.BoolSchema
                                __annotations__ = {
                                    "phone": phone,
                                    "number": number,
                                    "isPersonal": isPersonal,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isPersonal"]) -> MetaOapg.properties.isPersonal: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["phone", "number", "isPersonal", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isPersonal"]) -> typing.Union[MetaOapg.properties.isPersonal, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["phone", "number", "isPersonal", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
                            number: typing.Union[MetaOapg.properties.number, str, schemas.Unset] = schemas.unset,
                            isPersonal: typing.Union[MetaOapg.properties.isPersonal, bool, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                phone=phone,
                                number=number,
                                isPersonal=isPersonal,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'primaryPhoneNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def emailAddresses() -> typing.Type['PeopleCreateRequestEmailAddresses']:
                return PeopleCreateRequestEmailAddresses
        
            @staticmethod
            def phoneNumbers() -> typing.Type['PeopleCreateRequestPhoneNumbers']:
                return PeopleCreateRequestPhoneNumbers
        
            @staticmethod
            def addresses() -> typing.Type['PeopleCreateRequestAddresses']:
                return PeopleCreateRequestAddresses
        
            @staticmethod
            def customFields() -> typing.Type['PeopleCreateRequestCustomFields']:
                return PeopleCreateRequestCustomFields
        
            @staticmethod
            def medicalConditions() -> typing.Type['PeopleCreateRequestMedicalConditions']:
                return PeopleCreateRequestMedicalConditions
        
            @staticmethod
            def workRight() -> typing.Type['PeopleCreateRequestWorkRight']:
                return PeopleCreateRequestWorkRight
            
            
            class workRightExpiryDate(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'workRightExpiryDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class userAccount(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "username",
                            }
                            
                            class properties:
                                isEnabled = schemas.BoolSchema
                                username = schemas.StrSchema
                                sendWelcomeEmail = schemas.BoolSchema
                                
                                
                                class permissionGroups(
                                    schemas.ComposedSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class one_of_0(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.UUIDSchema
                                        
                                            def __new__(
                                                cls,
                                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, uuid.UUID, ]], typing.List[typing.Union[MetaOapg.items, str, uuid.UUID, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'one_of_0':
                                                return super().__new__(
                                                    cls,
                                                    arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                        one_of_1 = schemas.NoneSchema
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def one_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                cls.one_of_0,
                                                cls.one_of_1,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'permissionGroups':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "isEnabled": isEnabled,
                                    "username": username,
                                    "sendWelcomeEmail": sendWelcomeEmail,
                                    "permissionGroups": permissionGroups,
                                }
                        
                        username: MetaOapg.properties.username
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isEnabled"]) -> MetaOapg.properties.isEnabled: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sendWelcomeEmail"]) -> MetaOapg.properties.sendWelcomeEmail: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["permissionGroups"]) -> MetaOapg.properties.permissionGroups: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["isEnabled", "username", "sendWelcomeEmail", "permissionGroups", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isEnabled"]) -> typing.Union[MetaOapg.properties.isEnabled, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sendWelcomeEmail"]) -> typing.Union[MetaOapg.properties.sendWelcomeEmail, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["permissionGroups"]) -> typing.Union[MetaOapg.properties.permissionGroups, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isEnabled", "username", "sendWelcomeEmail", "permissionGroups", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            username: typing.Union[MetaOapg.properties.username, str, ],
                            isEnabled: typing.Union[MetaOapg.properties.isEnabled, bool, schemas.Unset] = schemas.unset,
                            sendWelcomeEmail: typing.Union[MetaOapg.properties.sendWelcomeEmail, bool, schemas.Unset] = schemas.unset,
                            permissionGroups: typing.Union[MetaOapg.properties.permissionGroups, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                username=username,
                                isEnabled=isEnabled,
                                sendWelcomeEmail=sendWelcomeEmail,
                                permissionGroups=permissionGroups,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'userAccount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "lastName": lastName,
                "title": title,
                "firstName": firstName,
                "middleName": middleName,
                "preferredName": preferredName,
                "dateOfBirth": dateOfBirth,
                "gender": gender,
                "employeeNumber": employeeNumber,
                "emergencyContact": emergencyContact,
                "primaryEmailAddress": primaryEmailAddress,
                "primaryPhoneNumber": primaryPhoneNumber,
                "emailAddresses": emailAddresses,
                "phoneNumbers": phoneNumbers,
                "addresses": addresses,
                "customFields": customFields,
                "medicalConditions": medicalConditions,
                "workRight": workRight,
                "workRightExpiryDate": workRightExpiryDate,
                "userAccount": userAccount,
            }
    
    lastName: MetaOapg.properties.lastName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferredName"]) -> MetaOapg.properties.preferredName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emergencyContact"]) -> 'PeopleCreateRequestEmergencyContact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryEmailAddress"]) -> MetaOapg.properties.primaryEmailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryPhoneNumber"]) -> MetaOapg.properties.primaryPhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailAddresses"]) -> 'PeopleCreateRequestEmailAddresses': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumbers"]) -> 'PeopleCreateRequestPhoneNumbers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addresses"]) -> 'PeopleCreateRequestAddresses': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFields"]) -> 'PeopleCreateRequestCustomFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medicalConditions"]) -> 'PeopleCreateRequestMedicalConditions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workRight"]) -> 'PeopleCreateRequestWorkRight': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workRightExpiryDate"]) -> MetaOapg.properties.workRightExpiryDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userAccount"]) -> MetaOapg.properties.userAccount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["lastName", "title", "firstName", "middleName", "preferredName", "dateOfBirth", "gender", "employeeNumber", "emergencyContact", "primaryEmailAddress", "primaryPhoneNumber", "emailAddresses", "phoneNumbers", "addresses", "customFields", "medicalConditions", "workRight", "workRightExpiryDate", "userAccount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferredName"]) -> typing.Union[MetaOapg.properties.preferredName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBirth"]) -> typing.Union[MetaOapg.properties.dateOfBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emergencyContact"]) -> typing.Union['PeopleCreateRequestEmergencyContact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryEmailAddress"]) -> typing.Union[MetaOapg.properties.primaryEmailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryPhoneNumber"]) -> typing.Union[MetaOapg.properties.primaryPhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailAddresses"]) -> typing.Union['PeopleCreateRequestEmailAddresses', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumbers"]) -> typing.Union['PeopleCreateRequestPhoneNumbers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addresses"]) -> typing.Union['PeopleCreateRequestAddresses', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFields"]) -> typing.Union['PeopleCreateRequestCustomFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medicalConditions"]) -> typing.Union['PeopleCreateRequestMedicalConditions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workRight"]) -> typing.Union['PeopleCreateRequestWorkRight', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workRightExpiryDate"]) -> typing.Union[MetaOapg.properties.workRightExpiryDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userAccount"]) -> typing.Union[MetaOapg.properties.userAccount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["lastName", "title", "firstName", "middleName", "preferredName", "dateOfBirth", "gender", "employeeNumber", "emergencyContact", "primaryEmailAddress", "primaryPhoneNumber", "emailAddresses", "phoneNumbers", "addresses", "customFields", "medicalConditions", "workRight", "workRightExpiryDate", "userAccount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        lastName: typing.Union[MetaOapg.properties.lastName, str, ],
        title: typing.Union[MetaOapg.properties.title, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        preferredName: typing.Union[MetaOapg.properties.preferredName, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        dateOfBirth: typing.Union[MetaOapg.properties.dateOfBirth, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        emergencyContact: typing.Union['PeopleCreateRequestEmergencyContact', schemas.Unset] = schemas.unset,
        primaryEmailAddress: typing.Union[MetaOapg.properties.primaryEmailAddress, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        primaryPhoneNumber: typing.Union[MetaOapg.properties.primaryPhoneNumber, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        emailAddresses: typing.Union['PeopleCreateRequestEmailAddresses', schemas.Unset] = schemas.unset,
        phoneNumbers: typing.Union['PeopleCreateRequestPhoneNumbers', schemas.Unset] = schemas.unset,
        addresses: typing.Union['PeopleCreateRequestAddresses', schemas.Unset] = schemas.unset,
        customFields: typing.Union['PeopleCreateRequestCustomFields', schemas.Unset] = schemas.unset,
        medicalConditions: typing.Union['PeopleCreateRequestMedicalConditions', schemas.Unset] = schemas.unset,
        workRight: typing.Union['PeopleCreateRequestWorkRight', schemas.Unset] = schemas.unset,
        workRightExpiryDate: typing.Union[MetaOapg.properties.workRightExpiryDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        userAccount: typing.Union[MetaOapg.properties.userAccount, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PeopleCreateRequest':
        return super().__new__(
            cls,
            *args,
            lastName=lastName,
            title=title,
            firstName=firstName,
            middleName=middleName,
            preferredName=preferredName,
            dateOfBirth=dateOfBirth,
            gender=gender,
            employeeNumber=employeeNumber,
            emergencyContact=emergencyContact,
            primaryEmailAddress=primaryEmailAddress,
            primaryPhoneNumber=primaryPhoneNumber,
            emailAddresses=emailAddresses,
            phoneNumbers=phoneNumbers,
            addresses=addresses,
            customFields=customFields,
            medicalConditions=medicalConditions,
            workRight=workRight,
            workRightExpiryDate=workRightExpiryDate,
            userAccount=userAccount,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.people_create_request_addresses import PeopleCreateRequestAddresses
from intelli_hr_python_sdk.model.people_create_request_custom_fields import PeopleCreateRequestCustomFields
from intelli_hr_python_sdk.model.people_create_request_email_addresses import PeopleCreateRequestEmailAddresses
from intelli_hr_python_sdk.model.people_create_request_emergency_contact import PeopleCreateRequestEmergencyContact
from intelli_hr_python_sdk.model.people_create_request_medical_conditions import PeopleCreateRequestMedicalConditions
from intelli_hr_python_sdk.model.people_create_request_phone_numbers import PeopleCreateRequestPhoneNumbers
from intelli_hr_python_sdk.model.people_create_request_work_right import PeopleCreateRequestWorkRight
