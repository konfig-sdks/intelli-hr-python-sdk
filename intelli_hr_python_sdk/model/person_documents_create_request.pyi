# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class PersonDocumentsCreateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "extension",
            "filename",
            "size",
            "person",
            "mime",
        }
        
        class properties:
        
            @staticmethod
            def person() -> typing.Type['PersonDocumentsCreateRequestPerson']:
                return PersonDocumentsCreateRequestPerson
            filename = schemas.StrSchema
            mime = schemas.StrSchema
            size = schemas.IntSchema
            extension = schemas.StrSchema
            __annotations__ = {
                "person": person,
                "filename": filename,
                "mime": mime,
                "size": size,
                "extension": extension,
            }
    
    extension: MetaOapg.properties.extension
    filename: MetaOapg.properties.filename
    size: MetaOapg.properties.size
    person: 'PersonDocumentsCreateRequestPerson'
    mime: MetaOapg.properties.mime
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["person"]) -> 'PersonDocumentsCreateRequestPerson': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mime"]) -> MetaOapg.properties.mime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extension"]) -> MetaOapg.properties.extension: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["person", "filename", "mime", "size", "extension", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["person"]) -> 'PersonDocumentsCreateRequestPerson': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mime"]) -> MetaOapg.properties.mime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extension"]) -> MetaOapg.properties.extension: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["person", "filename", "mime", "size", "extension", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        extension: typing.Union[MetaOapg.properties.extension, str, ],
        filename: typing.Union[MetaOapg.properties.filename, str, ],
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, ],
        person: 'PersonDocumentsCreateRequestPerson',
        mime: typing.Union[MetaOapg.properties.mime, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PersonDocumentsCreateRequest':
        return super().__new__(
            cls,
            *args,
            extension=extension,
            filename=filename,
            size=size,
            person=person,
            mime=mime,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.person_documents_create_request_person import PersonDocumentsCreateRequestPerson
