# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class JobRequirementGroupsListDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 36
                    min_length = 36
            name = schemas.StrSchema
        
            @staticmethod
            def libraryItems() -> typing.Type['JobRequirementGroupsListDataItemLibraryItems']:
                return JobRequirementGroupsListDataItemLibraryItems
            jobRequirementUsageCount = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "libraryItems": libraryItems,
                "jobRequirementUsageCount": jobRequirementUsageCount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["libraryItems"]) -> 'JobRequirementGroupsListDataItemLibraryItems': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobRequirementUsageCount"]) -> MetaOapg.properties.jobRequirementUsageCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "libraryItems", "jobRequirementUsageCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["libraryItems"]) -> typing.Union['JobRequirementGroupsListDataItemLibraryItems', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobRequirementUsageCount"]) -> typing.Union[MetaOapg.properties.jobRequirementUsageCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "libraryItems", "jobRequirementUsageCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        libraryItems: typing.Union['JobRequirementGroupsListDataItemLibraryItems', schemas.Unset] = schemas.unset,
        jobRequirementUsageCount: typing.Union[MetaOapg.properties.jobRequirementUsageCount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobRequirementGroupsListDataItem':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            libraryItems=libraryItems,
            jobRequirementUsageCount=jobRequirementUsageCount,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.job_requirement_groups_list_data_item_library_items import JobRequirementGroupsListDataItemLibraryItems
