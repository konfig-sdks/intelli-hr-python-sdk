# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class PersonIdImagePatchRequestCoordinates(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The coordinates to crop the image.<p>If `PERSON_PROFILE` is selected, the image will be stretched to an aspect ratio of 1:1 in IHR platform. Hence it is recommended to crop the image with an aspect ratio of 1:1 to avoid distortions. As an example for a `3000x4000` image to cropped to 1:1, the height can be modified to a value of 3000px which corresponds to the ratio `height=widthpx/heightpx=3000/4000=0.75`. For the height of image to be cropped in the center, vertical offset can be defined as `y=(1-height)/2=0.125`. With the following example, coordinates of `{ x: 0, y: 0.125, width: 1, height: 0.75}` will result in a square image that is cropped from the center.</p><p>If `PROFILE_COVER` is selected, the image will be stretched to an aspect ratio of 3:1 in IHR platform. As an example to avoid distortions, we can use the following formula for the new height `newHeightpx=widthpx/3`. The new height ratio will be defined as `height=newHeightpx/heightpx`. The vertical offset can be adjusted using `y=(1-height)/2` for the image height to be cropped from the center.</p>
    """


    class MetaOapg:
        required = {
            "width",
            "x",
            "y",
            "height",
        }
        
        class properties:
            height = schemas.IntSchema
            width = schemas.IntSchema
            x = schemas.IntSchema
            y = schemas.IntSchema
            __annotations__ = {
                "height": height,
                "width": width,
                "x": x,
                "y": y,
            }
    
    width: MetaOapg.properties.width
    x: MetaOapg.properties.x
    y: MetaOapg.properties.y
    height: MetaOapg.properties.height
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["height", "width", "x", "y", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["height", "width", "x", "y", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        width: typing.Union[MetaOapg.properties.width, decimal.Decimal, int, ],
        x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, ],
        y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, ],
        height: typing.Union[MetaOapg.properties.height, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PersonIdImagePatchRequestCoordinates':
        return super().__new__(
            cls,
            *args,
            width=width,
            x=x,
            y=y,
            height=height,
            _configuration=_configuration,
            **kwargs,
        )
