# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class CustomFieldDefinitionPatchRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class description(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            name = schemas.StrSchema
            isEnabled = schemas.BoolSchema
            isSensitive = schemas.BoolSchema
        
            @staticmethod
            def selectDefinition() -> typing.Type['CustomFieldDefinitionPatchRequestSelectDefinition']:
                return CustomFieldDefinitionPatchRequestSelectDefinition
            
            
            class peopleDropdownDefinition(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        allowSelectingIndividualJobs = schemas.BoolSchema
                        __annotations__ = {
                            "allowSelectingIndividualJobs": allowSelectingIndividualJobs,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allowSelectingIndividualJobs"]) -> MetaOapg.properties.allowSelectingIndividualJobs: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["allowSelectingIndividualJobs", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allowSelectingIndividualJobs"]) -> typing.Union[MetaOapg.properties.allowSelectingIndividualJobs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allowSelectingIndividualJobs", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    allowSelectingIndividualJobs: typing.Union[MetaOapg.properties.allowSelectingIndividualJobs, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'peopleDropdownDefinition':
                    return super().__new__(
                        cls,
                        *args,
                        allowSelectingIndividualJobs=allowSelectingIndividualJobs,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "description": description,
                "name": name,
                "isEnabled": isEnabled,
                "isSensitive": isSensitive,
                "selectDefinition": selectDefinition,
                "peopleDropdownDefinition": peopleDropdownDefinition,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isEnabled"]) -> MetaOapg.properties.isEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSensitive"]) -> MetaOapg.properties.isSensitive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selectDefinition"]) -> 'CustomFieldDefinitionPatchRequestSelectDefinition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["peopleDropdownDefinition"]) -> MetaOapg.properties.peopleDropdownDefinition: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "name", "isEnabled", "isSensitive", "selectDefinition", "peopleDropdownDefinition", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isEnabled"]) -> typing.Union[MetaOapg.properties.isEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSensitive"]) -> typing.Union[MetaOapg.properties.isSensitive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selectDefinition"]) -> typing.Union['CustomFieldDefinitionPatchRequestSelectDefinition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["peopleDropdownDefinition"]) -> typing.Union[MetaOapg.properties.peopleDropdownDefinition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "name", "isEnabled", "isSensitive", "selectDefinition", "peopleDropdownDefinition", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        isEnabled: typing.Union[MetaOapg.properties.isEnabled, bool, schemas.Unset] = schemas.unset,
        isSensitive: typing.Union[MetaOapg.properties.isSensitive, bool, schemas.Unset] = schemas.unset,
        selectDefinition: typing.Union['CustomFieldDefinitionPatchRequestSelectDefinition', schemas.Unset] = schemas.unset,
        peopleDropdownDefinition: typing.Union[MetaOapg.properties.peopleDropdownDefinition, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomFieldDefinitionPatchRequest':
        return super().__new__(
            cls,
            *args,
            description=description,
            name=name,
            isEnabled=isEnabled,
            isSensitive=isSensitive,
            selectDefinition=selectDefinition,
            peopleDropdownDefinition=peopleDropdownDefinition,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.custom_field_definition_patch_request_select_definition import CustomFieldDefinitionPatchRequestSelectDefinition
