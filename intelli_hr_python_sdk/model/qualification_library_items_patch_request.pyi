# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class QualificationLibraryItemsPatchRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            
            
            class qualificationTypeId(
                schemas.StrSchema
            ):
                pass
            
            
            class qualificationExpiryType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INAPPLICABLE(cls):
                    return cls("EXPIRY_INAPPLICABLE")
                
                @schemas.classproperty
                def OPTIONAL(cls):
                    return cls("EXPIRY_OPTIONAL")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("EXPIRY_REQUIRED")
            
            
            class qualificationRegistrationNumberVisibilityType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INAPPLICABLE(cls):
                    return cls("REGISTRATION_NUMBER_INAPPLICABLE")
                
                @schemas.classproperty
                def OPTIONAL(cls):
                    return cls("REGISTRATION_NUMBER_OPTIONAL")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("REGISTRATION_NUMBER_REQUIRED")
            
            
            class qualificationAttachmentRequirementType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def OPTIONAL(cls):
                    return cls("DOCUMENTS_OPTIONAL")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("DOCUMENTS_REQUIRED")
            expiryWarningPeriod = schemas.NumberSchema
            sendExpiryWarning = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "qualificationTypeId": qualificationTypeId,
                "qualificationExpiryType": qualificationExpiryType,
                "qualificationRegistrationNumberVisibilityType": qualificationRegistrationNumberVisibilityType,
                "qualificationAttachmentRequirementType": qualificationAttachmentRequirementType,
                "expiryWarningPeriod": expiryWarningPeriod,
                "sendExpiryWarning": sendExpiryWarning,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualificationTypeId"]) -> MetaOapg.properties.qualificationTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualificationExpiryType"]) -> MetaOapg.properties.qualificationExpiryType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualificationRegistrationNumberVisibilityType"]) -> MetaOapg.properties.qualificationRegistrationNumberVisibilityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualificationAttachmentRequirementType"]) -> MetaOapg.properties.qualificationAttachmentRequirementType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiryWarningPeriod"]) -> MetaOapg.properties.expiryWarningPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sendExpiryWarning"]) -> MetaOapg.properties.sendExpiryWarning: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "qualificationTypeId", "qualificationExpiryType", "qualificationRegistrationNumberVisibilityType", "qualificationAttachmentRequirementType", "expiryWarningPeriod", "sendExpiryWarning", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualificationTypeId"]) -> typing.Union[MetaOapg.properties.qualificationTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualificationExpiryType"]) -> typing.Union[MetaOapg.properties.qualificationExpiryType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualificationRegistrationNumberVisibilityType"]) -> typing.Union[MetaOapg.properties.qualificationRegistrationNumberVisibilityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualificationAttachmentRequirementType"]) -> typing.Union[MetaOapg.properties.qualificationAttachmentRequirementType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiryWarningPeriod"]) -> typing.Union[MetaOapg.properties.expiryWarningPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sendExpiryWarning"]) -> typing.Union[MetaOapg.properties.sendExpiryWarning, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "qualificationTypeId", "qualificationExpiryType", "qualificationRegistrationNumberVisibilityType", "qualificationAttachmentRequirementType", "expiryWarningPeriod", "sendExpiryWarning", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        qualificationTypeId: typing.Union[MetaOapg.properties.qualificationTypeId, str, schemas.Unset] = schemas.unset,
        qualificationExpiryType: typing.Union[MetaOapg.properties.qualificationExpiryType, str, schemas.Unset] = schemas.unset,
        qualificationRegistrationNumberVisibilityType: typing.Union[MetaOapg.properties.qualificationRegistrationNumberVisibilityType, str, schemas.Unset] = schemas.unset,
        qualificationAttachmentRequirementType: typing.Union[MetaOapg.properties.qualificationAttachmentRequirementType, str, schemas.Unset] = schemas.unset,
        expiryWarningPeriod: typing.Union[MetaOapg.properties.expiryWarningPeriod, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sendExpiryWarning: typing.Union[MetaOapg.properties.sendExpiryWarning, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QualificationLibraryItemsPatchRequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            qualificationTypeId=qualificationTypeId,
            qualificationExpiryType=qualificationExpiryType,
            qualificationRegistrationNumberVisibilityType=qualificationRegistrationNumberVisibilityType,
            qualificationAttachmentRequirementType=qualificationAttachmentRequirementType,
            expiryWarningPeriod=expiryWarningPeriod,
            sendExpiryWarning=sendExpiryWarning,
            _configuration=_configuration,
            **kwargs,
        )
