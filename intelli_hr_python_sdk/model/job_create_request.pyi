# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class JobCreateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "businessUnit",
            "person",
            "workClass",
            "name",
            "businessEntity",
            "companyStartDate",
        }
        
        class properties:
        
            @staticmethod
            def person() -> typing.Type['JobCreateRequestPerson']:
                return JobCreateRequestPerson
            companyStartDate = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def businessEntity() -> typing.Type['JobCreateRequestBusinessEntity']:
                return JobCreateRequestBusinessEntity
        
            @staticmethod
            def businessUnit() -> typing.Type['JobCreateRequestBusinessUnit']:
                return JobCreateRequestBusinessUnit
        
            @staticmethod
            def workClass() -> typing.Type['JobCreateRequestWorkClass']:
                return JobCreateRequestWorkClass
            companyEndDate = schemas.StrSchema
            startDate = schemas.StrSchema
            endDate = schemas.StrSchema
        
            @staticmethod
            def establishment() -> typing.Type['JobCreateRequestEstablishment']:
                return JobCreateRequestEstablishment
        
            @staticmethod
            def supervisorPerson() -> typing.Type['JobCreateRequestSupervisorPerson']:
                return JobCreateRequestSupervisorPerson
        
            @staticmethod
            def supervisorJob() -> typing.Type['JobCreateRequestSupervisorJob']:
                return JobCreateRequestSupervisorJob
        
            @staticmethod
            def location() -> typing.Type['JobCreateRequestLocation']:
                return JobCreateRequestLocation
        
            @staticmethod
            def workType() -> typing.Type['JobCreateRequestWorkType']:
                return JobCreateRequestWorkType
            fte = schemas.StrSchema
        
            @staticmethod
            def payGrade() -> typing.Type['JobCreateRequestPayGrade']:
                return JobCreateRequestPayGrade
        
            @staticmethod
            def employmentCondition() -> typing.Type['JobCreateRequestEmploymentCondition']:
                return JobCreateRequestEmploymentCondition
        
            @staticmethod
            def remunerationSchedule() -> typing.Type['JobCreateRequestRemunerationSchedule']:
                return JobCreateRequestRemunerationSchedule
        
            @staticmethod
            def recruitment() -> typing.Type['JobCreateRequestRecruitment']:
                return JobCreateRequestRecruitment
        
            @staticmethod
            def customFields() -> typing.Type['JobCreateRequestCustomFields']:
                return JobCreateRequestCustomFields
            __annotations__ = {
                "person": person,
                "companyStartDate": companyStartDate,
                "name": name,
                "businessEntity": businessEntity,
                "businessUnit": businessUnit,
                "workClass": workClass,
                "companyEndDate": companyEndDate,
                "startDate": startDate,
                "endDate": endDate,
                "establishment": establishment,
                "supervisorPerson": supervisorPerson,
                "supervisorJob": supervisorJob,
                "location": location,
                "workType": workType,
                "fte": fte,
                "payGrade": payGrade,
                "employmentCondition": employmentCondition,
                "remunerationSchedule": remunerationSchedule,
                "recruitment": recruitment,
                "customFields": customFields,
            }
    
    businessUnit: 'JobCreateRequestBusinessUnit'
    person: 'JobCreateRequestPerson'
    workClass: 'JobCreateRequestWorkClass'
    name: MetaOapg.properties.name
    businessEntity: 'JobCreateRequestBusinessEntity'
    companyStartDate: MetaOapg.properties.companyStartDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["person"]) -> 'JobCreateRequestPerson': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyStartDate"]) -> MetaOapg.properties.companyStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessEntity"]) -> 'JobCreateRequestBusinessEntity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessUnit"]) -> 'JobCreateRequestBusinessUnit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workClass"]) -> 'JobCreateRequestWorkClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyEndDate"]) -> MetaOapg.properties.companyEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["establishment"]) -> 'JobCreateRequestEstablishment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorPerson"]) -> 'JobCreateRequestSupervisorPerson': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorJob"]) -> 'JobCreateRequestSupervisorJob': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'JobCreateRequestLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workType"]) -> 'JobCreateRequestWorkType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fte"]) -> MetaOapg.properties.fte: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGrade"]) -> 'JobCreateRequestPayGrade': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentCondition"]) -> 'JobCreateRequestEmploymentCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remunerationSchedule"]) -> 'JobCreateRequestRemunerationSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recruitment"]) -> 'JobCreateRequestRecruitment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFields"]) -> 'JobCreateRequestCustomFields': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["person", "companyStartDate", "name", "businessEntity", "businessUnit", "workClass", "companyEndDate", "startDate", "endDate", "establishment", "supervisorPerson", "supervisorJob", "location", "workType", "fte", "payGrade", "employmentCondition", "remunerationSchedule", "recruitment", "customFields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["person"]) -> 'JobCreateRequestPerson': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyStartDate"]) -> MetaOapg.properties.companyStartDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessEntity"]) -> 'JobCreateRequestBusinessEntity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessUnit"]) -> 'JobCreateRequestBusinessUnit': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workClass"]) -> 'JobCreateRequestWorkClass': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyEndDate"]) -> typing.Union[MetaOapg.properties.companyEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["establishment"]) -> typing.Union['JobCreateRequestEstablishment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorPerson"]) -> typing.Union['JobCreateRequestSupervisorPerson', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorJob"]) -> typing.Union['JobCreateRequestSupervisorJob', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['JobCreateRequestLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workType"]) -> typing.Union['JobCreateRequestWorkType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fte"]) -> typing.Union[MetaOapg.properties.fte, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGrade"]) -> typing.Union['JobCreateRequestPayGrade', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentCondition"]) -> typing.Union['JobCreateRequestEmploymentCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remunerationSchedule"]) -> typing.Union['JobCreateRequestRemunerationSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recruitment"]) -> typing.Union['JobCreateRequestRecruitment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFields"]) -> typing.Union['JobCreateRequestCustomFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["person", "companyStartDate", "name", "businessEntity", "businessUnit", "workClass", "companyEndDate", "startDate", "endDate", "establishment", "supervisorPerson", "supervisorJob", "location", "workType", "fte", "payGrade", "employmentCondition", "remunerationSchedule", "recruitment", "customFields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        businessUnit: 'JobCreateRequestBusinessUnit',
        person: 'JobCreateRequestPerson',
        workClass: 'JobCreateRequestWorkClass',
        name: typing.Union[MetaOapg.properties.name, str, ],
        businessEntity: 'JobCreateRequestBusinessEntity',
        companyStartDate: typing.Union[MetaOapg.properties.companyStartDate, str, ],
        companyEndDate: typing.Union[MetaOapg.properties.companyEndDate, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, schemas.Unset] = schemas.unset,
        establishment: typing.Union['JobCreateRequestEstablishment', schemas.Unset] = schemas.unset,
        supervisorPerson: typing.Union['JobCreateRequestSupervisorPerson', schemas.Unset] = schemas.unset,
        supervisorJob: typing.Union['JobCreateRequestSupervisorJob', schemas.Unset] = schemas.unset,
        location: typing.Union['JobCreateRequestLocation', schemas.Unset] = schemas.unset,
        workType: typing.Union['JobCreateRequestWorkType', schemas.Unset] = schemas.unset,
        fte: typing.Union[MetaOapg.properties.fte, str, schemas.Unset] = schemas.unset,
        payGrade: typing.Union['JobCreateRequestPayGrade', schemas.Unset] = schemas.unset,
        employmentCondition: typing.Union['JobCreateRequestEmploymentCondition', schemas.Unset] = schemas.unset,
        remunerationSchedule: typing.Union['JobCreateRequestRemunerationSchedule', schemas.Unset] = schemas.unset,
        recruitment: typing.Union['JobCreateRequestRecruitment', schemas.Unset] = schemas.unset,
        customFields: typing.Union['JobCreateRequestCustomFields', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobCreateRequest':
        return super().__new__(
            cls,
            *args,
            businessUnit=businessUnit,
            person=person,
            workClass=workClass,
            name=name,
            businessEntity=businessEntity,
            companyStartDate=companyStartDate,
            companyEndDate=companyEndDate,
            startDate=startDate,
            endDate=endDate,
            establishment=establishment,
            supervisorPerson=supervisorPerson,
            supervisorJob=supervisorJob,
            location=location,
            workType=workType,
            fte=fte,
            payGrade=payGrade,
            employmentCondition=employmentCondition,
            remunerationSchedule=remunerationSchedule,
            recruitment=recruitment,
            customFields=customFields,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.job_create_request_business_entity import JobCreateRequestBusinessEntity
from intelli_hr_python_sdk.model.job_create_request_business_unit import JobCreateRequestBusinessUnit
from intelli_hr_python_sdk.model.job_create_request_custom_fields import JobCreateRequestCustomFields
from intelli_hr_python_sdk.model.job_create_request_employment_condition import JobCreateRequestEmploymentCondition
from intelli_hr_python_sdk.model.job_create_request_establishment import JobCreateRequestEstablishment
from intelli_hr_python_sdk.model.job_create_request_location import JobCreateRequestLocation
from intelli_hr_python_sdk.model.job_create_request_pay_grade import JobCreateRequestPayGrade
from intelli_hr_python_sdk.model.job_create_request_person import JobCreateRequestPerson
from intelli_hr_python_sdk.model.job_create_request_recruitment import JobCreateRequestRecruitment
from intelli_hr_python_sdk.model.job_create_request_remuneration_schedule import JobCreateRequestRemunerationSchedule
from intelli_hr_python_sdk.model.job_create_request_supervisor_job import JobCreateRequestSupervisorJob
from intelli_hr_python_sdk.model.job_create_request_supervisor_person import JobCreateRequestSupervisorPerson
from intelli_hr_python_sdk.model.job_create_request_work_class import JobCreateRequestWorkClass
from intelli_hr_python_sdk.model.job_create_request_work_type import JobCreateRequestWorkType
