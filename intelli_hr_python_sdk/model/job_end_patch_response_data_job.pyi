# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class JobEndPatchResponseDataJob(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def person() -> typing.Type['JobEndPatchResponseDataJobPerson']:
                return JobEndPatchResponseDataJobPerson
        
            @staticmethod
            def recruitment() -> typing.Type['JobEndPatchResponseDataJobRecruitment']:
                return JobEndPatchResponseDataJobRecruitment
            
            
            class extendedLeave(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                startDate = schemas.AnyTypeSchema
                                endDate = schemas.AnyTypeSchema
                                isEndDateConfirmed = schemas.BoolSchema
                                
                                
                                class type(
                                    schemas.ComposedSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class one_of_0(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    
                                                    
                                                    class id(
                                                        schemas.StrSchema
                                                    ):
                                                        pass
                                                    name = schemas.StrSchema
                                                    link = schemas.StrSchema
                                                    __annotations__ = {
                                                        "id": id,
                                                        "name": name,
                                                        "link": link,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "link", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "link", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                                link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'one_of_0':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    id=id,
                                                    name=name,
                                                    link=link,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        one_of_1 = schemas.NoneSchema
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def one_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                cls.one_of_0,
                                                cls.one_of_1,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'type':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "startDate": startDate,
                                    "endDate": endDate,
                                    "isEndDateConfirmed": isEndDateConfirmed,
                                    "type": type,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isEndDateConfirmed"]) -> MetaOapg.properties.isEndDateConfirmed: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["startDate", "endDate", "isEndDateConfirmed", "type", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isEndDateConfirmed"]) -> typing.Union[MetaOapg.properties.isEndDateConfirmed, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["startDate", "endDate", "isEndDateConfirmed", "type", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            startDate: typing.Union[MetaOapg.properties.startDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            endDate: typing.Union[MetaOapg.properties.endDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            isEndDateConfirmed: typing.Union[MetaOapg.properties.isEndDateConfirmed, bool, schemas.Unset] = schemas.unset,
                            type: typing.Union[MetaOapg.properties.type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                startDate=startDate,
                                endDate=endDate,
                                isEndDateConfirmed=isEndDateConfirmed,
                                type=type,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'extendedLeave':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def location() -> typing.Type['JobEndPatchResponseDataJobLocation']:
                return JobEndPatchResponseDataJobLocation
        
            @staticmethod
            def payGrade() -> typing.Type['JobEndPatchResponseDataJobPayGrade']:
                return JobEndPatchResponseDataJobPayGrade
        
            @staticmethod
            def businessUnit() -> typing.Type['JobEndPatchResponseDataJobBusinessUnit']:
                return JobEndPatchResponseDataJobBusinessUnit
        
            @staticmethod
            def businessEntity() -> typing.Type['JobEndPatchResponseDataJobBusinessEntity']:
                return JobEndPatchResponseDataJobBusinessEntity
        
            @staticmethod
            def establishment() -> typing.Type['JobEndPatchResponseDataJobEstablishment']:
                return JobEndPatchResponseDataJobEstablishment
            
            
            class supervisorJob(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.NoneSchema
                    
                    
                    class one_of_1(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class id(
                                    schemas.StrSchema
                                ):
                                    pass
                                jobStatus = schemas.StrSchema
                                name = schemas.StrSchema
                                
                                
                                class positionTitle(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class id(
                                                schemas.StrSchema
                                            ):
                                                pass
                                            name = schemas.StrSchema
                                            code = schemas.AnyTypeSchema
                                            __annotations__ = {
                                                "id": id,
                                                "name": name,
                                                "code": code,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "code", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "code", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        code: typing.Union[MetaOapg.properties.code, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'positionTitle':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            id=id,
                                            name=name,
                                            code=code,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                link = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "jobStatus": jobStatus,
                                    "name": name,
                                    "positionTitle": positionTitle,
                                    "link": link,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["jobStatus"]) -> MetaOapg.properties.jobStatus: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["positionTitle"]) -> MetaOapg.properties.positionTitle: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "jobStatus", "name", "positionTitle", "link", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["jobStatus"]) -> typing.Union[MetaOapg.properties.jobStatus, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["positionTitle"]) -> typing.Union[MetaOapg.properties.positionTitle, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "jobStatus", "name", "positionTitle", "link", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            jobStatus: typing.Union[MetaOapg.properties.jobStatus, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            positionTitle: typing.Union[MetaOapg.properties.positionTitle, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_1':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                jobStatus=jobStatus,
                                name=name,
                                positionTitle=positionTitle,
                                link=link,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'supervisorJob':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class supervisorPerson(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.NoneSchema
                    
                    
                    class one_of_1(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class id(
                                    schemas.StrSchema
                                ):
                                    pass
                                displayName = schemas.StrSchema
                                
                                
                                class employeeNumber(
                                    schemas.ComposedSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        one_of_0 = schemas.StrSchema
                                        one_of_1 = schemas.NoneSchema
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def one_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                cls.one_of_0,
                                                cls.one_of_1,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'employeeNumber':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                autoIncrementIntellihrId = schemas.NumberSchema
                                link = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "displayName": displayName,
                                    "employeeNumber": employeeNumber,
                                    "autoIncrementIntellihrId": autoIncrementIntellihrId,
                                    "link": link,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["autoIncrementIntellihrId"]) -> MetaOapg.properties.autoIncrementIntellihrId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "displayName", "employeeNumber", "autoIncrementIntellihrId", "link", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["autoIncrementIntellihrId"]) -> typing.Union[MetaOapg.properties.autoIncrementIntellihrId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "displayName", "employeeNumber", "autoIncrementIntellihrId", "link", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
                            employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            autoIncrementIntellihrId: typing.Union[MetaOapg.properties.autoIncrementIntellihrId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_1':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                displayName=displayName,
                                employeeNumber=employeeNumber,
                                autoIncrementIntellihrId=autoIncrementIntellihrId,
                                link=link,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'supervisorPerson':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class employmentCondition(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.NoneSchema
                    
                    
                    class one_of_1(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class id(
                                    schemas.StrSchema
                                ):
                                    pass
                                startDate = schemas.AnyTypeSchema
                                endDate = schemas.AnyTypeSchema
                                name = schemas.StrSchema
                                
                                
                                class awardName(
                                    schemas.ComposedSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        one_of_0 = schemas.StrSchema
                                        one_of_1 = schemas.NoneSchema
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def one_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                cls.one_of_0,
                                                cls.one_of_1,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'awardName':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                link = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "startDate": startDate,
                                    "endDate": endDate,
                                    "name": name,
                                    "awardName": awardName,
                                    "link": link,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["awardName"]) -> MetaOapg.properties.awardName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "startDate", "endDate", "name", "awardName", "link", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["awardName"]) -> typing.Union[MetaOapg.properties.awardName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "startDate", "endDate", "name", "awardName", "link", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            startDate: typing.Union[MetaOapg.properties.startDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            endDate: typing.Union[MetaOapg.properties.endDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            awardName: typing.Union[MetaOapg.properties.awardName, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_1':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                startDate=startDate,
                                endDate=endDate,
                                name=name,
                                awardName=awardName,
                                link=link,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'employmentCondition':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def remunerationSchedule() -> typing.Type['JobEndPatchResponseDataJobRemunerationSchedule']:
                return JobEndPatchResponseDataJobRemunerationSchedule
            name = schemas.StrSchema
        
            @staticmethod
            def positionTitle() -> typing.Type['JobEndPatchResponseDataJobPositionTitle']:
                return JobEndPatchResponseDataJobPositionTitle
            
            
            class fte(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.NoneSchema
                    one_of_1 = schemas.NumberSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'fte':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def comments() -> typing.Type['JobEndPatchResponseDataJobComments']:
                return JobEndPatchResponseDataJobComments
            
            
            class lastestJobChangeComment(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                description = schemas.AnyTypeSchema
                                
                                
                                class id(
                                    schemas.StrSchema
                                ):
                                    pass
                                date = schemas.AnyTypeSchema
                                
                                
                                class jobChangeReason(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class id(
                                                schemas.StrSchema
                                            ):
                                                pass
                                            name = schemas.StrSchema
                                            link = schemas.StrSchema
                                            __annotations__ = {
                                                "id": id,
                                                "name": name,
                                                "link": link,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "link", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "link", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                        link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'jobChangeReason':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            id=id,
                                            name=name,
                                            link=link,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "description": description,
                                    "id": id,
                                    "date": date,
                                    "jobChangeReason": jobChangeReason,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["jobChangeReason"]) -> MetaOapg.properties.jobChangeReason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "date", "jobChangeReason", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["jobChangeReason"]) -> typing.Union[MetaOapg.properties.jobChangeReason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "date", "jobChangeReason", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            description: typing.Union[MetaOapg.properties.description, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            date: typing.Union[MetaOapg.properties.date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            jobChangeReason: typing.Union[MetaOapg.properties.jobChangeReason, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                description=description,
                                id=id,
                                date=date,
                                jobChangeReason=jobChangeReason,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'lastestJobChangeComment':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            workClass = schemas.StrSchema
            workType = schemas.StrSchema
            isPrimaryJob = schemas.BoolSchema
            jobStatus = schemas.StrSchema
            
            
            class createdBy(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class id(
                                    schemas.StrSchema
                                ):
                                    pass
                                link = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "link": link,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "link", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "link", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                link=link,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'createdBy':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class updatedBy(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class id(
                                    schemas.StrSchema
                                ):
                                    pass
                                link = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "link": link,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "link", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "link", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                link=link,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'updatedBy':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            positionStartDate = schemas.StrSchema
            companyStartDate = schemas.StrSchema
            
            
            class companyEndDate(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'companyEndDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            isEndDateConfirmed = schemas.BoolSchema
            
            
            class turnoverType(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'turnoverType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class turnoverReason(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'turnoverReason':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def customFields() -> typing.Type['CustomFieldsResponse']:
                return CustomFieldsResponse
            createdAt = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "person": person,
                "recruitment": recruitment,
                "extendedLeave": extendedLeave,
                "location": location,
                "payGrade": payGrade,
                "businessUnit": businessUnit,
                "businessEntity": businessEntity,
                "establishment": establishment,
                "supervisorJob": supervisorJob,
                "supervisorPerson": supervisorPerson,
                "employmentCondition": employmentCondition,
                "remunerationSchedule": remunerationSchedule,
                "name": name,
                "positionTitle": positionTitle,
                "fte": fte,
                "comments": comments,
                "lastestJobChangeComment": lastestJobChangeComment,
                "workClass": workClass,
                "workType": workType,
                "isPrimaryJob": isPrimaryJob,
                "jobStatus": jobStatus,
                "createdBy": createdBy,
                "updatedBy": updatedBy,
                "positionStartDate": positionStartDate,
                "companyStartDate": companyStartDate,
                "companyEndDate": companyEndDate,
                "isEndDateConfirmed": isEndDateConfirmed,
                "turnoverType": turnoverType,
                "turnoverReason": turnoverReason,
                "customFields": customFields,
                "createdAt": createdAt,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["person"]) -> 'JobEndPatchResponseDataJobPerson': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recruitment"]) -> 'JobEndPatchResponseDataJobRecruitment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extendedLeave"]) -> MetaOapg.properties.extendedLeave: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'JobEndPatchResponseDataJobLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGrade"]) -> 'JobEndPatchResponseDataJobPayGrade': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessUnit"]) -> 'JobEndPatchResponseDataJobBusinessUnit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessEntity"]) -> 'JobEndPatchResponseDataJobBusinessEntity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["establishment"]) -> 'JobEndPatchResponseDataJobEstablishment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorJob"]) -> MetaOapg.properties.supervisorJob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorPerson"]) -> MetaOapg.properties.supervisorPerson: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentCondition"]) -> MetaOapg.properties.employmentCondition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remunerationSchedule"]) -> 'JobEndPatchResponseDataJobRemunerationSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionTitle"]) -> 'JobEndPatchResponseDataJobPositionTitle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fte"]) -> MetaOapg.properties.fte: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> 'JobEndPatchResponseDataJobComments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastestJobChangeComment"]) -> MetaOapg.properties.lastestJobChangeComment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workClass"]) -> MetaOapg.properties.workClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workType"]) -> MetaOapg.properties.workType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPrimaryJob"]) -> MetaOapg.properties.isPrimaryJob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobStatus"]) -> MetaOapg.properties.jobStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedBy"]) -> MetaOapg.properties.updatedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionStartDate"]) -> MetaOapg.properties.positionStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyStartDate"]) -> MetaOapg.properties.companyStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyEndDate"]) -> MetaOapg.properties.companyEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isEndDateConfirmed"]) -> MetaOapg.properties.isEndDateConfirmed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["turnoverType"]) -> MetaOapg.properties.turnoverType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["turnoverReason"]) -> MetaOapg.properties.turnoverReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFields"]) -> 'CustomFieldsResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "person", "recruitment", "extendedLeave", "location", "payGrade", "businessUnit", "businessEntity", "establishment", "supervisorJob", "supervisorPerson", "employmentCondition", "remunerationSchedule", "name", "positionTitle", "fte", "comments", "lastestJobChangeComment", "workClass", "workType", "isPrimaryJob", "jobStatus", "createdBy", "updatedBy", "positionStartDate", "companyStartDate", "companyEndDate", "isEndDateConfirmed", "turnoverType", "turnoverReason", "customFields", "createdAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["person"]) -> typing.Union['JobEndPatchResponseDataJobPerson', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recruitment"]) -> typing.Union['JobEndPatchResponseDataJobRecruitment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extendedLeave"]) -> typing.Union[MetaOapg.properties.extendedLeave, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['JobEndPatchResponseDataJobLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGrade"]) -> typing.Union['JobEndPatchResponseDataJobPayGrade', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessUnit"]) -> typing.Union['JobEndPatchResponseDataJobBusinessUnit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessEntity"]) -> typing.Union['JobEndPatchResponseDataJobBusinessEntity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["establishment"]) -> typing.Union['JobEndPatchResponseDataJobEstablishment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorJob"]) -> typing.Union[MetaOapg.properties.supervisorJob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorPerson"]) -> typing.Union[MetaOapg.properties.supervisorPerson, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentCondition"]) -> typing.Union[MetaOapg.properties.employmentCondition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remunerationSchedule"]) -> typing.Union['JobEndPatchResponseDataJobRemunerationSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionTitle"]) -> typing.Union['JobEndPatchResponseDataJobPositionTitle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fte"]) -> typing.Union[MetaOapg.properties.fte, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union['JobEndPatchResponseDataJobComments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastestJobChangeComment"]) -> typing.Union[MetaOapg.properties.lastestJobChangeComment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workClass"]) -> typing.Union[MetaOapg.properties.workClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workType"]) -> typing.Union[MetaOapg.properties.workType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPrimaryJob"]) -> typing.Union[MetaOapg.properties.isPrimaryJob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobStatus"]) -> typing.Union[MetaOapg.properties.jobStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union[MetaOapg.properties.createdBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedBy"]) -> typing.Union[MetaOapg.properties.updatedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionStartDate"]) -> typing.Union[MetaOapg.properties.positionStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyStartDate"]) -> typing.Union[MetaOapg.properties.companyStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyEndDate"]) -> typing.Union[MetaOapg.properties.companyEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isEndDateConfirmed"]) -> typing.Union[MetaOapg.properties.isEndDateConfirmed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["turnoverType"]) -> typing.Union[MetaOapg.properties.turnoverType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["turnoverReason"]) -> typing.Union[MetaOapg.properties.turnoverReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFields"]) -> typing.Union['CustomFieldsResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "person", "recruitment", "extendedLeave", "location", "payGrade", "businessUnit", "businessEntity", "establishment", "supervisorJob", "supervisorPerson", "employmentCondition", "remunerationSchedule", "name", "positionTitle", "fte", "comments", "lastestJobChangeComment", "workClass", "workType", "isPrimaryJob", "jobStatus", "createdBy", "updatedBy", "positionStartDate", "companyStartDate", "companyEndDate", "isEndDateConfirmed", "turnoverType", "turnoverReason", "customFields", "createdAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        person: typing.Union['JobEndPatchResponseDataJobPerson', schemas.Unset] = schemas.unset,
        recruitment: typing.Union['JobEndPatchResponseDataJobRecruitment', schemas.Unset] = schemas.unset,
        extendedLeave: typing.Union[MetaOapg.properties.extendedLeave, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        location: typing.Union['JobEndPatchResponseDataJobLocation', schemas.Unset] = schemas.unset,
        payGrade: typing.Union['JobEndPatchResponseDataJobPayGrade', schemas.Unset] = schemas.unset,
        businessUnit: typing.Union['JobEndPatchResponseDataJobBusinessUnit', schemas.Unset] = schemas.unset,
        businessEntity: typing.Union['JobEndPatchResponseDataJobBusinessEntity', schemas.Unset] = schemas.unset,
        establishment: typing.Union['JobEndPatchResponseDataJobEstablishment', schemas.Unset] = schemas.unset,
        supervisorJob: typing.Union[MetaOapg.properties.supervisorJob, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        supervisorPerson: typing.Union[MetaOapg.properties.supervisorPerson, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        employmentCondition: typing.Union[MetaOapg.properties.employmentCondition, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        remunerationSchedule: typing.Union['JobEndPatchResponseDataJobRemunerationSchedule', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        positionTitle: typing.Union['JobEndPatchResponseDataJobPositionTitle', schemas.Unset] = schemas.unset,
        fte: typing.Union[MetaOapg.properties.fte, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        comments: typing.Union['JobEndPatchResponseDataJobComments', schemas.Unset] = schemas.unset,
        lastestJobChangeComment: typing.Union[MetaOapg.properties.lastestJobChangeComment, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        workClass: typing.Union[MetaOapg.properties.workClass, str, schemas.Unset] = schemas.unset,
        workType: typing.Union[MetaOapg.properties.workType, str, schemas.Unset] = schemas.unset,
        isPrimaryJob: typing.Union[MetaOapg.properties.isPrimaryJob, bool, schemas.Unset] = schemas.unset,
        jobStatus: typing.Union[MetaOapg.properties.jobStatus, str, schemas.Unset] = schemas.unset,
        createdBy: typing.Union[MetaOapg.properties.createdBy, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        updatedBy: typing.Union[MetaOapg.properties.updatedBy, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        positionStartDate: typing.Union[MetaOapg.properties.positionStartDate, str, schemas.Unset] = schemas.unset,
        companyStartDate: typing.Union[MetaOapg.properties.companyStartDate, str, schemas.Unset] = schemas.unset,
        companyEndDate: typing.Union[MetaOapg.properties.companyEndDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        isEndDateConfirmed: typing.Union[MetaOapg.properties.isEndDateConfirmed, bool, schemas.Unset] = schemas.unset,
        turnoverType: typing.Union[MetaOapg.properties.turnoverType, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        turnoverReason: typing.Union[MetaOapg.properties.turnoverReason, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        customFields: typing.Union['CustomFieldsResponse', schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobEndPatchResponseDataJob':
        return super().__new__(
            cls,
            *args,
            id=id,
            person=person,
            recruitment=recruitment,
            extendedLeave=extendedLeave,
            location=location,
            payGrade=payGrade,
            businessUnit=businessUnit,
            businessEntity=businessEntity,
            establishment=establishment,
            supervisorJob=supervisorJob,
            supervisorPerson=supervisorPerson,
            employmentCondition=employmentCondition,
            remunerationSchedule=remunerationSchedule,
            name=name,
            positionTitle=positionTitle,
            fte=fte,
            comments=comments,
            lastestJobChangeComment=lastestJobChangeComment,
            workClass=workClass,
            workType=workType,
            isPrimaryJob=isPrimaryJob,
            jobStatus=jobStatus,
            createdBy=createdBy,
            updatedBy=updatedBy,
            positionStartDate=positionStartDate,
            companyStartDate=companyStartDate,
            companyEndDate=companyEndDate,
            isEndDateConfirmed=isEndDateConfirmed,
            turnoverType=turnoverType,
            turnoverReason=turnoverReason,
            customFields=customFields,
            createdAt=createdAt,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.custom_fields_response import CustomFieldsResponse
from intelli_hr_python_sdk.model.job_end_patch_response_data_job_business_entity import JobEndPatchResponseDataJobBusinessEntity
from intelli_hr_python_sdk.model.job_end_patch_response_data_job_business_unit import JobEndPatchResponseDataJobBusinessUnit
from intelli_hr_python_sdk.model.job_end_patch_response_data_job_comments import JobEndPatchResponseDataJobComments
from intelli_hr_python_sdk.model.job_end_patch_response_data_job_establishment import JobEndPatchResponseDataJobEstablishment
from intelli_hr_python_sdk.model.job_end_patch_response_data_job_location import JobEndPatchResponseDataJobLocation
from intelli_hr_python_sdk.model.job_end_patch_response_data_job_pay_grade import JobEndPatchResponseDataJobPayGrade
from intelli_hr_python_sdk.model.job_end_patch_response_data_job_person import JobEndPatchResponseDataJobPerson
from intelli_hr_python_sdk.model.job_end_patch_response_data_job_position_title import JobEndPatchResponseDataJobPositionTitle
from intelli_hr_python_sdk.model.job_end_patch_response_data_job_recruitment import JobEndPatchResponseDataJobRecruitment
from intelli_hr_python_sdk.model.job_end_patch_response_data_job_remuneration_schedule import JobEndPatchResponseDataJobRemunerationSchedule
