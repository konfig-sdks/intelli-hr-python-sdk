# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class WebhookEventJobUpdatedScheduled(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_3(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    event = schemas.AnyTypeSchema
                    
                    
                    class links(
                        schemas.AnyTypeSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                _self = schemas.StrSchema
                                selfEncoded = schemas.StrSchema
                                __annotations__ = {
                                    "self": _self,
                                    "selfEncoded": selfEncoded,
                                }
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["self"]) -> MetaOapg.properties._self: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["selfEncoded"]) -> MetaOapg.properties.selfEncoded: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["self", "selfEncoded", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["self"]) -> typing.Union[MetaOapg.properties._self, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["selfEncoded"]) -> typing.Union[MetaOapg.properties.selfEncoded, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["self", "selfEncoded", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            selfEncoded: typing.Union[MetaOapg.properties.selfEncoded, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'links':
                            return super().__new__(
                                cls,
                                *args,
                                selfEncoded=selfEncoded,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class updated_attributes(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.EnumBase,
                                schemas.StrSchema
                            ):
                                
                                @schemas.classproperty
                                def BUSINESS_ENTITY_ID(cls):
                                    return cls("business_entity_id")
                                
                                @schemas.classproperty
                                def BUSINESS_UNIT_ID(cls):
                                    return cls("business_unit_id")
                                
                                @schemas.classproperty
                                def FTE(cls):
                                    return cls("fte")
                                
                                @schemas.classproperty
                                def LOCATION_ID(cls):
                                    return cls("location_id")
                                
                                @schemas.classproperty
                                def NAME(cls):
                                    return cls("name")
                                
                                @schemas.classproperty
                                def PAY_GRADE_ID(cls):
                                    return cls("pay_grade_id")
                                
                                @schemas.classproperty
                                def PAY_PACKAGE(cls):
                                    return cls("pay_package")
                                
                                @schemas.classproperty
                                def SUPERVISOR_JOB_ID(cls):
                                    return cls("supervisor_job_id")
                                
                                @schemas.classproperty
                                def WORK_CLASS_ID(cls):
                                    return cls("work_class_id")
                                
                                @schemas.classproperty
                                def WORK_TYPE_ID(cls):
                                    return cls("work_type_id")
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'updated_attributes':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    __annotations__ = {
                        "event": event,
                        "links": links,
                        "updated_attributes": updated_attributes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["event"]) -> MetaOapg.properties.event: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["updated_attributes"]) -> MetaOapg.properties.updated_attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["event", "links", "updated_attributes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["event"]) -> typing.Union[MetaOapg.properties.event, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["updated_attributes"]) -> typing.Union[MetaOapg.properties.updated_attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["event", "links", "updated_attributes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                event: typing.Union[MetaOapg.properties.event, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                links: typing.Union[MetaOapg.properties.links, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                updated_attributes: typing.Union[MetaOapg.properties.updated_attributes, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_3':
                return super().__new__(
                    cls,
                    *args,
                    event=event,
                    links=links,
                    updated_attributes=updated_attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                WebhookEventBasic,
                WebhookEventEffectiveDatesUpdate,
                WebhookEventUpdateAttributes,
                cls.all_of_3,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebhookEventJobUpdatedScheduled':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.webhook_event_basic import WebhookEventBasic
from intelli_hr_python_sdk.model.webhook_event_effective_dates_update import WebhookEventEffectiveDatesUpdate
from intelli_hr_python_sdk.model.webhook_event_update_attributes import WebhookEventUpdateAttributes
