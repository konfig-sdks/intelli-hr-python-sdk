# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class PayGradeUpdateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "effectiveFrom",
        }
        
        class properties:
            effectiveFrom = schemas.StrSchema
            description = schemas.StrSchema
            effectiveTo = schemas.StrSchema
            isEnabled = schemas.BoolSchema
            name = schemas.StrSchema
            code = schemas.StrSchema
        
            @staticmethod
            def employmentCondition() -> typing.Type['PayGradeUpdateRequestEmploymentCondition']:
                return PayGradeUpdateRequestEmploymentCondition
            payGradeType = schemas.StrSchema
            isOverridable = schemas.BoolSchema
            permanentHourlyRate = schemas.NumberSchema
            
            
            class permanentHourlyRateCurrency(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Z]{3}$',
                    }]
            casualHourlyRate = schemas.NumberSchema
            
            
            class casualHourlyRateCurrency(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Z]{3}$',
                    }]
            annualSalary = schemas.NumberSchema
            
            
            class annualSalaryCurrency(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[A-Z]{3}$',
                    }]
        
            @staticmethod
            def paySteps() -> typing.Type['PayGradeUpdateRequestPaySteps']:
                return PayGradeUpdateRequestPaySteps
            __annotations__ = {
                "effectiveFrom": effectiveFrom,
                "description": description,
                "effectiveTo": effectiveTo,
                "isEnabled": isEnabled,
                "name": name,
                "code": code,
                "employmentCondition": employmentCondition,
                "payGradeType": payGradeType,
                "isOverridable": isOverridable,
                "permanentHourlyRate": permanentHourlyRate,
                "permanentHourlyRateCurrency": permanentHourlyRateCurrency,
                "casualHourlyRate": casualHourlyRate,
                "casualHourlyRateCurrency": casualHourlyRateCurrency,
                "annualSalary": annualSalary,
                "annualSalaryCurrency": annualSalaryCurrency,
                "paySteps": paySteps,
            }
    
    effectiveFrom: MetaOapg.properties.effectiveFrom
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveFrom"]) -> MetaOapg.properties.effectiveFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveTo"]) -> MetaOapg.properties.effectiveTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isEnabled"]) -> MetaOapg.properties.isEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentCondition"]) -> 'PayGradeUpdateRequestEmploymentCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGradeType"]) -> MetaOapg.properties.payGradeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isOverridable"]) -> MetaOapg.properties.isOverridable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permanentHourlyRate"]) -> MetaOapg.properties.permanentHourlyRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permanentHourlyRateCurrency"]) -> MetaOapg.properties.permanentHourlyRateCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["casualHourlyRate"]) -> MetaOapg.properties.casualHourlyRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["casualHourlyRateCurrency"]) -> MetaOapg.properties.casualHourlyRateCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annualSalary"]) -> MetaOapg.properties.annualSalary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annualSalaryCurrency"]) -> MetaOapg.properties.annualSalaryCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paySteps"]) -> 'PayGradeUpdateRequestPaySteps': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["effectiveFrom", "description", "effectiveTo", "isEnabled", "name", "code", "employmentCondition", "payGradeType", "isOverridable", "permanentHourlyRate", "permanentHourlyRateCurrency", "casualHourlyRate", "casualHourlyRateCurrency", "annualSalary", "annualSalaryCurrency", "paySteps", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveFrom"]) -> MetaOapg.properties.effectiveFrom: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveTo"]) -> typing.Union[MetaOapg.properties.effectiveTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isEnabled"]) -> typing.Union[MetaOapg.properties.isEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentCondition"]) -> typing.Union['PayGradeUpdateRequestEmploymentCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGradeType"]) -> typing.Union[MetaOapg.properties.payGradeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isOverridable"]) -> typing.Union[MetaOapg.properties.isOverridable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permanentHourlyRate"]) -> typing.Union[MetaOapg.properties.permanentHourlyRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permanentHourlyRateCurrency"]) -> typing.Union[MetaOapg.properties.permanentHourlyRateCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["casualHourlyRate"]) -> typing.Union[MetaOapg.properties.casualHourlyRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["casualHourlyRateCurrency"]) -> typing.Union[MetaOapg.properties.casualHourlyRateCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annualSalary"]) -> typing.Union[MetaOapg.properties.annualSalary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annualSalaryCurrency"]) -> typing.Union[MetaOapg.properties.annualSalaryCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paySteps"]) -> typing.Union['PayGradeUpdateRequestPaySteps', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["effectiveFrom", "description", "effectiveTo", "isEnabled", "name", "code", "employmentCondition", "payGradeType", "isOverridable", "permanentHourlyRate", "permanentHourlyRateCurrency", "casualHourlyRate", "casualHourlyRateCurrency", "annualSalary", "annualSalaryCurrency", "paySteps", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        effectiveFrom: typing.Union[MetaOapg.properties.effectiveFrom, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        effectiveTo: typing.Union[MetaOapg.properties.effectiveTo, str, schemas.Unset] = schemas.unset,
        isEnabled: typing.Union[MetaOapg.properties.isEnabled, bool, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        employmentCondition: typing.Union['PayGradeUpdateRequestEmploymentCondition', schemas.Unset] = schemas.unset,
        payGradeType: typing.Union[MetaOapg.properties.payGradeType, str, schemas.Unset] = schemas.unset,
        isOverridable: typing.Union[MetaOapg.properties.isOverridable, bool, schemas.Unset] = schemas.unset,
        permanentHourlyRate: typing.Union[MetaOapg.properties.permanentHourlyRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        permanentHourlyRateCurrency: typing.Union[MetaOapg.properties.permanentHourlyRateCurrency, str, schemas.Unset] = schemas.unset,
        casualHourlyRate: typing.Union[MetaOapg.properties.casualHourlyRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        casualHourlyRateCurrency: typing.Union[MetaOapg.properties.casualHourlyRateCurrency, str, schemas.Unset] = schemas.unset,
        annualSalary: typing.Union[MetaOapg.properties.annualSalary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        annualSalaryCurrency: typing.Union[MetaOapg.properties.annualSalaryCurrency, str, schemas.Unset] = schemas.unset,
        paySteps: typing.Union['PayGradeUpdateRequestPaySteps', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayGradeUpdateRequest':
        return super().__new__(
            cls,
            *args,
            effectiveFrom=effectiveFrom,
            description=description,
            effectiveTo=effectiveTo,
            isEnabled=isEnabled,
            name=name,
            code=code,
            employmentCondition=employmentCondition,
            payGradeType=payGradeType,
            isOverridable=isOverridable,
            permanentHourlyRate=permanentHourlyRate,
            permanentHourlyRateCurrency=permanentHourlyRateCurrency,
            casualHourlyRate=casualHourlyRate,
            casualHourlyRateCurrency=casualHourlyRateCurrency,
            annualSalary=annualSalary,
            annualSalaryCurrency=annualSalaryCurrency,
            paySteps=paySteps,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.pay_grade_update_request_employment_condition import PayGradeUpdateRequestEmploymentCondition
from intelli_hr_python_sdk.model.pay_grade_update_request_pay_steps import PayGradeUpdateRequestPaySteps
