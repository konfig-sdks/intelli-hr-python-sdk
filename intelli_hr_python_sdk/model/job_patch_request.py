# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class JobPatchRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "effectiveFrom",
        }
        
        class properties:
            
            
            class effectiveFrom(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'effectiveFrom':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            effectiveTo = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def businessEntity() -> typing.Type['JobPatchRequestBusinessEntity']:
                return JobPatchRequestBusinessEntity
        
            @staticmethod
            def businessUnit() -> typing.Type['JobPatchRequestBusinessUnit']:
                return JobPatchRequestBusinessUnit
        
            @staticmethod
            def establishment() -> typing.Type['JobPatchRequestEstablishment']:
                return JobPatchRequestEstablishment
        
            @staticmethod
            def jobChangeReason() -> typing.Type['JobPatchRequestJobChangeReason']:
                return JobPatchRequestJobChangeReason
        
            @staticmethod
            def supervisorPerson() -> typing.Type['JobPatchRequestSupervisorPerson']:
                return JobPatchRequestSupervisorPerson
        
            @staticmethod
            def supervisorJob() -> typing.Type['JobPatchRequestSupervisorJob']:
                return JobPatchRequestSupervisorJob
        
            @staticmethod
            def location() -> typing.Type['JobPatchRequestLocation']:
                return JobPatchRequestLocation
        
            @staticmethod
            def workClass() -> typing.Type['JobPatchRequestWorkClass']:
                return JobPatchRequestWorkClass
        
            @staticmethod
            def workType() -> typing.Type['JobPatchRequestWorkType']:
                return JobPatchRequestWorkType
            fte = schemas.StrSchema
        
            @staticmethod
            def payGrade() -> typing.Type['JobPatchRequestPayGrade']:
                return JobPatchRequestPayGrade
        
            @staticmethod
            def employmentCondition() -> typing.Type['JobPatchRequestEmploymentCondition']:
                return JobPatchRequestEmploymentCondition
        
            @staticmethod
            def remunerationSchedule() -> typing.Type['JobPatchRequestRemunerationSchedule']:
                return JobPatchRequestRemunerationSchedule
        
            @staticmethod
            def customFields() -> typing.Type['JobPatchRequestCustomFields']:
                return JobPatchRequestCustomFields
            __annotations__ = {
                "effectiveFrom": effectiveFrom,
                "effectiveTo": effectiveTo,
                "name": name,
                "businessEntity": businessEntity,
                "businessUnit": businessUnit,
                "establishment": establishment,
                "jobChangeReason": jobChangeReason,
                "supervisorPerson": supervisorPerson,
                "supervisorJob": supervisorJob,
                "location": location,
                "workClass": workClass,
                "workType": workType,
                "fte": fte,
                "payGrade": payGrade,
                "employmentCondition": employmentCondition,
                "remunerationSchedule": remunerationSchedule,
                "customFields": customFields,
            }
    
    effectiveFrom: MetaOapg.properties.effectiveFrom
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveFrom"]) -> MetaOapg.properties.effectiveFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveTo"]) -> MetaOapg.properties.effectiveTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessEntity"]) -> 'JobPatchRequestBusinessEntity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessUnit"]) -> 'JobPatchRequestBusinessUnit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["establishment"]) -> 'JobPatchRequestEstablishment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobChangeReason"]) -> 'JobPatchRequestJobChangeReason': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorPerson"]) -> 'JobPatchRequestSupervisorPerson': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorJob"]) -> 'JobPatchRequestSupervisorJob': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'JobPatchRequestLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workClass"]) -> 'JobPatchRequestWorkClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workType"]) -> 'JobPatchRequestWorkType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fte"]) -> MetaOapg.properties.fte: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGrade"]) -> 'JobPatchRequestPayGrade': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentCondition"]) -> 'JobPatchRequestEmploymentCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remunerationSchedule"]) -> 'JobPatchRequestRemunerationSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFields"]) -> 'JobPatchRequestCustomFields': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["effectiveFrom", "effectiveTo", "name", "businessEntity", "businessUnit", "establishment", "jobChangeReason", "supervisorPerson", "supervisorJob", "location", "workClass", "workType", "fte", "payGrade", "employmentCondition", "remunerationSchedule", "customFields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveFrom"]) -> MetaOapg.properties.effectiveFrom: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveTo"]) -> typing.Union[MetaOapg.properties.effectiveTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessEntity"]) -> typing.Union['JobPatchRequestBusinessEntity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessUnit"]) -> typing.Union['JobPatchRequestBusinessUnit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["establishment"]) -> typing.Union['JobPatchRequestEstablishment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobChangeReason"]) -> typing.Union['JobPatchRequestJobChangeReason', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorPerson"]) -> typing.Union['JobPatchRequestSupervisorPerson', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorJob"]) -> typing.Union['JobPatchRequestSupervisorJob', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['JobPatchRequestLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workClass"]) -> typing.Union['JobPatchRequestWorkClass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workType"]) -> typing.Union['JobPatchRequestWorkType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fte"]) -> typing.Union[MetaOapg.properties.fte, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGrade"]) -> typing.Union['JobPatchRequestPayGrade', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentCondition"]) -> typing.Union['JobPatchRequestEmploymentCondition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remunerationSchedule"]) -> typing.Union['JobPatchRequestRemunerationSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFields"]) -> typing.Union['JobPatchRequestCustomFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["effectiveFrom", "effectiveTo", "name", "businessEntity", "businessUnit", "establishment", "jobChangeReason", "supervisorPerson", "supervisorJob", "location", "workClass", "workType", "fte", "payGrade", "employmentCondition", "remunerationSchedule", "customFields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        effectiveFrom: typing.Union[MetaOapg.properties.effectiveFrom, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        effectiveTo: typing.Union[MetaOapg.properties.effectiveTo, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        businessEntity: typing.Union['JobPatchRequestBusinessEntity', schemas.Unset] = schemas.unset,
        businessUnit: typing.Union['JobPatchRequestBusinessUnit', schemas.Unset] = schemas.unset,
        establishment: typing.Union['JobPatchRequestEstablishment', schemas.Unset] = schemas.unset,
        jobChangeReason: typing.Union['JobPatchRequestJobChangeReason', schemas.Unset] = schemas.unset,
        supervisorPerson: typing.Union['JobPatchRequestSupervisorPerson', schemas.Unset] = schemas.unset,
        supervisorJob: typing.Union['JobPatchRequestSupervisorJob', schemas.Unset] = schemas.unset,
        location: typing.Union['JobPatchRequestLocation', schemas.Unset] = schemas.unset,
        workClass: typing.Union['JobPatchRequestWorkClass', schemas.Unset] = schemas.unset,
        workType: typing.Union['JobPatchRequestWorkType', schemas.Unset] = schemas.unset,
        fte: typing.Union[MetaOapg.properties.fte, str, schemas.Unset] = schemas.unset,
        payGrade: typing.Union['JobPatchRequestPayGrade', schemas.Unset] = schemas.unset,
        employmentCondition: typing.Union['JobPatchRequestEmploymentCondition', schemas.Unset] = schemas.unset,
        remunerationSchedule: typing.Union['JobPatchRequestRemunerationSchedule', schemas.Unset] = schemas.unset,
        customFields: typing.Union['JobPatchRequestCustomFields', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobPatchRequest':
        return super().__new__(
            cls,
            *args,
            effectiveFrom=effectiveFrom,
            effectiveTo=effectiveTo,
            name=name,
            businessEntity=businessEntity,
            businessUnit=businessUnit,
            establishment=establishment,
            jobChangeReason=jobChangeReason,
            supervisorPerson=supervisorPerson,
            supervisorJob=supervisorJob,
            location=location,
            workClass=workClass,
            workType=workType,
            fte=fte,
            payGrade=payGrade,
            employmentCondition=employmentCondition,
            remunerationSchedule=remunerationSchedule,
            customFields=customFields,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.job_patch_request_business_entity import JobPatchRequestBusinessEntity
from intelli_hr_python_sdk.model.job_patch_request_business_unit import JobPatchRequestBusinessUnit
from intelli_hr_python_sdk.model.job_patch_request_custom_fields import JobPatchRequestCustomFields
from intelli_hr_python_sdk.model.job_patch_request_employment_condition import JobPatchRequestEmploymentCondition
from intelli_hr_python_sdk.model.job_patch_request_establishment import JobPatchRequestEstablishment
from intelli_hr_python_sdk.model.job_patch_request_job_change_reason import JobPatchRequestJobChangeReason
from intelli_hr_python_sdk.model.job_patch_request_location import JobPatchRequestLocation
from intelli_hr_python_sdk.model.job_patch_request_pay_grade import JobPatchRequestPayGrade
from intelli_hr_python_sdk.model.job_patch_request_remuneration_schedule import JobPatchRequestRemunerationSchedule
from intelli_hr_python_sdk.model.job_patch_request_supervisor_job import JobPatchRequestSupervisorJob
from intelli_hr_python_sdk.model.job_patch_request_supervisor_person import JobPatchRequestSupervisorPerson
from intelli_hr_python_sdk.model.job_patch_request_work_class import JobPatchRequestWorkClass
from intelli_hr_python_sdk.model.job_patch_request_work_type import JobPatchRequestWorkType
