# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class QualificationLibraryItemsListDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            name = schemas.StrSchema
        
            @staticmethod
            def qualificationType() -> typing.Type['QualificationLibraryItemsListDataItemQualificationType']:
                return QualificationLibraryItemsListDataItemQualificationType
            
            
            class qualificationExpiryType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INAPPLICABLE(cls):
                    return cls("EXPIRY_INAPPLICABLE")
                
                @schemas.classproperty
                def OPTIONAL(cls):
                    return cls("EXPIRY_OPTIONAL")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("EXPIRY_REQUIRED")
            
            
            class qualificationRegistrationNumberVisibilityType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INAPPLICABLE(cls):
                    return cls("REGISTRATION_NUMBER_INAPPLICABLE")
                
                @schemas.classproperty
                def OPTIONAL(cls):
                    return cls("REGISTRATION_NUMBER_OPTIONAL")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("REGISTRATION_NUMBER_REQUIRED")
            
            
            class qualificationAttachmentRequirementType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def OPTIONAL(cls):
                    return cls("DOCUMENTS_OPTIONAL")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("DOCUMENTS_REQUIRED")
            expiryWarningPeriod = schemas.NumberSchema
            
            
            class expiryPeriods(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.AnyTypeSchema,
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        
                                        
                                        class id(
                                            schemas.StrSchema
                                        ):
                                            pass
                                        
                                        
                                        class notificationEventType(
                                            schemas.StrSchema
                                        ):
                                            pass
                                        expiryWarningPeriod = schemas.NumberSchema
                                        __annotations__ = {
                                            "id": id,
                                            "notificationEventType": notificationEventType,
                                            "expiryWarningPeriod": expiryWarningPeriod,
                                        }
                            
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["notificationEventType"]) -> MetaOapg.properties.notificationEventType: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["expiryWarningPeriod"]) -> MetaOapg.properties.expiryWarningPeriod: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "notificationEventType", "expiryWarningPeriod", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["notificationEventType"]) -> typing.Union[MetaOapg.properties.notificationEventType, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["expiryWarningPeriod"]) -> typing.Union[MetaOapg.properties.expiryWarningPeriod, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "notificationEventType", "expiryWarningPeriod", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                    notificationEventType: typing.Union[MetaOapg.properties.notificationEventType, str, schemas.Unset] = schemas.unset,
                                    expiryWarningPeriod: typing.Union[MetaOapg.properties.expiryWarningPeriod, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        id=id,
                                        notificationEventType=notificationEventType,
                                        expiryWarningPeriod=expiryWarningPeriod,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'expiryPeriods':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            sendExpiryWarning = schemas.BoolSchema
            qualificationInstanceUsageCount = schemas.NumberSchema
            jobRequirementGroupUsageCount = schemas.NumberSchema
            jobRequirementUsageCount = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "qualificationType": qualificationType,
                "qualificationExpiryType": qualificationExpiryType,
                "qualificationRegistrationNumberVisibilityType": qualificationRegistrationNumberVisibilityType,
                "qualificationAttachmentRequirementType": qualificationAttachmentRequirementType,
                "expiryWarningPeriod": expiryWarningPeriod,
                "expiryPeriods": expiryPeriods,
                "sendExpiryWarning": sendExpiryWarning,
                "qualificationInstanceUsageCount": qualificationInstanceUsageCount,
                "jobRequirementGroupUsageCount": jobRequirementGroupUsageCount,
                "jobRequirementUsageCount": jobRequirementUsageCount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualificationType"]) -> 'QualificationLibraryItemsListDataItemQualificationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualificationExpiryType"]) -> MetaOapg.properties.qualificationExpiryType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualificationRegistrationNumberVisibilityType"]) -> MetaOapg.properties.qualificationRegistrationNumberVisibilityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualificationAttachmentRequirementType"]) -> MetaOapg.properties.qualificationAttachmentRequirementType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiryWarningPeriod"]) -> MetaOapg.properties.expiryWarningPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiryPeriods"]) -> MetaOapg.properties.expiryPeriods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sendExpiryWarning"]) -> MetaOapg.properties.sendExpiryWarning: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualificationInstanceUsageCount"]) -> MetaOapg.properties.qualificationInstanceUsageCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobRequirementGroupUsageCount"]) -> MetaOapg.properties.jobRequirementGroupUsageCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobRequirementUsageCount"]) -> MetaOapg.properties.jobRequirementUsageCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "qualificationType", "qualificationExpiryType", "qualificationRegistrationNumberVisibilityType", "qualificationAttachmentRequirementType", "expiryWarningPeriod", "expiryPeriods", "sendExpiryWarning", "qualificationInstanceUsageCount", "jobRequirementGroupUsageCount", "jobRequirementUsageCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualificationType"]) -> typing.Union['QualificationLibraryItemsListDataItemQualificationType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualificationExpiryType"]) -> typing.Union[MetaOapg.properties.qualificationExpiryType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualificationRegistrationNumberVisibilityType"]) -> typing.Union[MetaOapg.properties.qualificationRegistrationNumberVisibilityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualificationAttachmentRequirementType"]) -> typing.Union[MetaOapg.properties.qualificationAttachmentRequirementType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiryWarningPeriod"]) -> typing.Union[MetaOapg.properties.expiryWarningPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiryPeriods"]) -> typing.Union[MetaOapg.properties.expiryPeriods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sendExpiryWarning"]) -> typing.Union[MetaOapg.properties.sendExpiryWarning, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualificationInstanceUsageCount"]) -> typing.Union[MetaOapg.properties.qualificationInstanceUsageCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobRequirementGroupUsageCount"]) -> typing.Union[MetaOapg.properties.jobRequirementGroupUsageCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobRequirementUsageCount"]) -> typing.Union[MetaOapg.properties.jobRequirementUsageCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "qualificationType", "qualificationExpiryType", "qualificationRegistrationNumberVisibilityType", "qualificationAttachmentRequirementType", "expiryWarningPeriod", "expiryPeriods", "sendExpiryWarning", "qualificationInstanceUsageCount", "jobRequirementGroupUsageCount", "jobRequirementUsageCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        qualificationType: typing.Union['QualificationLibraryItemsListDataItemQualificationType', schemas.Unset] = schemas.unset,
        qualificationExpiryType: typing.Union[MetaOapg.properties.qualificationExpiryType, str, schemas.Unset] = schemas.unset,
        qualificationRegistrationNumberVisibilityType: typing.Union[MetaOapg.properties.qualificationRegistrationNumberVisibilityType, str, schemas.Unset] = schemas.unset,
        qualificationAttachmentRequirementType: typing.Union[MetaOapg.properties.qualificationAttachmentRequirementType, str, schemas.Unset] = schemas.unset,
        expiryWarningPeriod: typing.Union[MetaOapg.properties.expiryWarningPeriod, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        expiryPeriods: typing.Union[MetaOapg.properties.expiryPeriods, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        sendExpiryWarning: typing.Union[MetaOapg.properties.sendExpiryWarning, bool, schemas.Unset] = schemas.unset,
        qualificationInstanceUsageCount: typing.Union[MetaOapg.properties.qualificationInstanceUsageCount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        jobRequirementGroupUsageCount: typing.Union[MetaOapg.properties.jobRequirementGroupUsageCount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        jobRequirementUsageCount: typing.Union[MetaOapg.properties.jobRequirementUsageCount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QualificationLibraryItemsListDataItem':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            qualificationType=qualificationType,
            qualificationExpiryType=qualificationExpiryType,
            qualificationRegistrationNumberVisibilityType=qualificationRegistrationNumberVisibilityType,
            qualificationAttachmentRequirementType=qualificationAttachmentRequirementType,
            expiryWarningPeriod=expiryWarningPeriod,
            expiryPeriods=expiryPeriods,
            sendExpiryWarning=sendExpiryWarning,
            qualificationInstanceUsageCount=qualificationInstanceUsageCount,
            jobRequirementGroupUsageCount=jobRequirementGroupUsageCount,
            jobRequirementUsageCount=jobRequirementUsageCount,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.qualification_library_items_list_data_item_qualification_type import QualificationLibraryItemsListDataItemQualificationType
