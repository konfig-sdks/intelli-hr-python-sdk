# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class FormsData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 36
                    min_length = 36
            issueDate = schemas.StrSchema
            
            
            class dueDate(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'dueDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class reminderDate(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'reminderDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            accessCode = schemas.StrSchema
            
            
            class completedAt(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'completedAt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def formDesign() -> typing.Type['FormsDataFormDesign']:
                return FormsDataFormDesign
        
            @staticmethod
            def subject() -> typing.Type['FormsDataSubject']:
                return FormsDataSubject
            
            
            class respondent(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class job(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class id(
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            max_length = 36
                                            min_length = 36
                                    name = schemas.StrSchema
                                    link = schemas.StrSchema
                                    __annotations__ = {
                                        "id": id,
                                        "name": name,
                                        "link": link,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "link", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "link", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'job':
                                return super().__new__(
                                    cls,
                                    *args,
                                    id=id,
                                    name=name,
                                    link=link,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class person(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class id(
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            max_length = 36
                                            min_length = 36
                                    displayName = schemas.StrSchema
                                    
                                    
                                    class emailAddresses(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            
                                            class items(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        
                                                        
                                                        class email(
                                                            schemas.ComposedSchema,
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                one_of_0 = schemas.StrSchema
                                                                one_of_1 = schemas.NoneSchema
                                                                
                                                                @classmethod
                                                                @functools.lru_cache()
                                                                def one_of(cls):
                                                                    # we need this here to make our import statements work
                                                                    # we must store _composed_schemas in here so the code is only run
                                                                    # when we invoke this method. If we kept this at the class
                                                                    # level we would get an error because the class level
                                                                    # code would be run when this module is imported, and these composed
                                                                    # classes don't exist yet because their module has not finished
                                                                    # loading
                                                                    return [
                                                                        cls.one_of_0,
                                                                        cls.one_of_1,
                                                                    ]
                                                        
                                                        
                                                            def __new__(
                                                                cls,
                                                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                            ) -> 'email':
                                                                return super().__new__(
                                                                    cls,
                                                                    *args,
                                                                    _configuration=_configuration,
                                                                    **kwargs,
                                                                )
                                                        isPrimary = schemas.BoolSchema
                                                        isPersonal = schemas.BoolSchema
                                                        __annotations__ = {
                                                            "email": email,
                                                            "isPrimary": isPrimary,
                                                            "isPersonal": isPersonal,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["isPrimary"]) -> MetaOapg.properties.isPrimary: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["isPersonal"]) -> MetaOapg.properties.isPersonal: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "isPrimary", "isPersonal", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["isPrimary"]) -> typing.Union[MetaOapg.properties.isPrimary, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["isPersonal"]) -> typing.Union[MetaOapg.properties.isPersonal, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "isPrimary", "isPersonal", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                    email: typing.Union[MetaOapg.properties.email, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                                    isPrimary: typing.Union[MetaOapg.properties.isPrimary, bool, schemas.Unset] = schemas.unset,
                                                    isPersonal: typing.Union[MetaOapg.properties.isPersonal, bool, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'items':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        email=email,
                                                        isPrimary=isPrimary,
                                                        isPersonal=isPersonal,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'emailAddresses':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    
                                    
                                    class employeeNumber(
                                        schemas.ComposedSchema,
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            one_of_0 = schemas.StrSchema
                                            one_of_1 = schemas.NoneSchema
                                            
                                            @classmethod
                                            @functools.lru_cache()
                                            def one_of(cls):
                                                # we need this here to make our import statements work
                                                # we must store _composed_schemas in here so the code is only run
                                                # when we invoke this method. If we kept this at the class
                                                # level we would get an error because the class level
                                                # code would be run when this module is imported, and these composed
                                                # classes don't exist yet because their module has not finished
                                                # loading
                                                return [
                                                    cls.one_of_0,
                                                    cls.one_of_1,
                                                ]
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'employeeNumber':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    autoIncrementIntellihrId = schemas.NumberSchema
                                    link = schemas.StrSchema
                                    __annotations__ = {
                                        "id": id,
                                        "displayName": displayName,
                                        "emailAddresses": emailAddresses,
                                        "employeeNumber": employeeNumber,
                                        "autoIncrementIntellihrId": autoIncrementIntellihrId,
                                        "link": link,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["emailAddresses"]) -> MetaOapg.properties.emailAddresses: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["autoIncrementIntellihrId"]) -> MetaOapg.properties.autoIncrementIntellihrId: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "displayName", "emailAddresses", "employeeNumber", "autoIncrementIntellihrId", "link", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["emailAddresses"]) -> typing.Union[MetaOapg.properties.emailAddresses, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["autoIncrementIntellihrId"]) -> typing.Union[MetaOapg.properties.autoIncrementIntellihrId, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "displayName", "emailAddresses", "employeeNumber", "autoIncrementIntellihrId", "link", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
                                emailAddresses: typing.Union[MetaOapg.properties.emailAddresses, list, tuple, schemas.Unset] = schemas.unset,
                                employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                autoIncrementIntellihrId: typing.Union[MetaOapg.properties.autoIncrementIntellihrId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'person':
                                return super().__new__(
                                    cls,
                                    *args,
                                    id=id,
                                    displayName=displayName,
                                    emailAddresses=emailAddresses,
                                    employeeNumber=employeeNumber,
                                    autoIncrementIntellihrId=autoIncrementIntellihrId,
                                    link=link,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "job": job,
                            "person": person,
                        }
                    one_of_0 = schemas.DictSchema
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["job"]) -> MetaOapg.properties.job: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["person"]) -> MetaOapg.properties.person: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["job", "person", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union[MetaOapg.properties.job, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["person"]) -> typing.Union[MetaOapg.properties.person, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job", "person", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    job: typing.Union[MetaOapg.properties.job, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    person: typing.Union[MetaOapg.properties.person, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'respondent':
                    return super().__new__(
                        cls,
                        *args,
                        job=job,
                        person=person,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class submitter(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class job(
                                    schemas.ComposedSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class one_of_0(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    
                                                    
                                                    class id(
                                                        schemas.StrSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            max_length = 36
                                                            min_length = 36
                                                    name = schemas.StrSchema
                                                    link = schemas.StrSchema
                                                    __annotations__ = {
                                                        "id": id,
                                                        "name": name,
                                                        "link": link,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "link", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "link", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                                link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'one_of_0':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    id=id,
                                                    name=name,
                                                    link=link,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        one_of_1 = schemas.NoneSchema
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def one_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                cls.one_of_0,
                                                cls.one_of_1,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'job':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class person(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class id(
                                                schemas.StrSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    max_length = 36
                                                    min_length = 36
                                            displayName = schemas.StrSchema
                                            
                                            
                                            class emailAddresses(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                
                                                                
                                                                class email(
                                                                    schemas.ComposedSchema,
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        one_of_0 = schemas.StrSchema
                                                                        one_of_1 = schemas.NoneSchema
                                                                        
                                                                        @classmethod
                                                                        @functools.lru_cache()
                                                                        def one_of(cls):
                                                                            # we need this here to make our import statements work
                                                                            # we must store _composed_schemas in here so the code is only run
                                                                            # when we invoke this method. If we kept this at the class
                                                                            # level we would get an error because the class level
                                                                            # code would be run when this module is imported, and these composed
                                                                            # classes don't exist yet because their module has not finished
                                                                            # loading
                                                                            return [
                                                                                cls.one_of_0,
                                                                                cls.one_of_1,
                                                                            ]
                                                                
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                    ) -> 'email':
                                                                        return super().__new__(
                                                                            cls,
                                                                            *args,
                                                                            _configuration=_configuration,
                                                                            **kwargs,
                                                                        )
                                                                isPrimary = schemas.BoolSchema
                                                                isPersonal = schemas.BoolSchema
                                                                __annotations__ = {
                                                                    "email": email,
                                                                    "isPrimary": isPrimary,
                                                                    "isPersonal": isPersonal,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["isPrimary"]) -> MetaOapg.properties.isPrimary: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["isPersonal"]) -> MetaOapg.properties.isPersonal: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "isPrimary", "isPersonal", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["isPrimary"]) -> typing.Union[MetaOapg.properties.isPrimary, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["isPersonal"]) -> typing.Union[MetaOapg.properties.isPersonal, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "isPrimary", "isPersonal", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            email: typing.Union[MetaOapg.properties.email, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                                            isPrimary: typing.Union[MetaOapg.properties.isPrimary, bool, schemas.Unset] = schemas.unset,
                                                            isPersonal: typing.Union[MetaOapg.properties.isPersonal, bool, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                email=email,
                                                                isPrimary=isPrimary,
                                                                isPersonal=isPersonal,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'emailAddresses':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class employeeNumber(
                                                schemas.ComposedSchema,
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    one_of_0 = schemas.StrSchema
                                                    one_of_1 = schemas.NoneSchema
                                                    
                                                    @classmethod
                                                    @functools.lru_cache()
                                                    def one_of(cls):
                                                        # we need this here to make our import statements work
                                                        # we must store _composed_schemas in here so the code is only run
                                                        # when we invoke this method. If we kept this at the class
                                                        # level we would get an error because the class level
                                                        # code would be run when this module is imported, and these composed
                                                        # classes don't exist yet because their module has not finished
                                                        # loading
                                                        return [
                                                            cls.one_of_0,
                                                            cls.one_of_1,
                                                        ]
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'employeeNumber':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            autoIncrementIntellihrId = schemas.NumberSchema
                                            link = schemas.StrSchema
                                            __annotations__ = {
                                                "id": id,
                                                "displayName": displayName,
                                                "emailAddresses": emailAddresses,
                                                "employeeNumber": employeeNumber,
                                                "autoIncrementIntellihrId": autoIncrementIntellihrId,
                                                "link": link,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["emailAddresses"]) -> MetaOapg.properties.emailAddresses: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["autoIncrementIntellihrId"]) -> MetaOapg.properties.autoIncrementIntellihrId: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "displayName", "emailAddresses", "employeeNumber", "autoIncrementIntellihrId", "link", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["emailAddresses"]) -> typing.Union[MetaOapg.properties.emailAddresses, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["autoIncrementIntellihrId"]) -> typing.Union[MetaOapg.properties.autoIncrementIntellihrId, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "displayName", "emailAddresses", "employeeNumber", "autoIncrementIntellihrId", "link", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
                                        emailAddresses: typing.Union[MetaOapg.properties.emailAddresses, list, tuple, schemas.Unset] = schemas.unset,
                                        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                        autoIncrementIntellihrId: typing.Union[MetaOapg.properties.autoIncrementIntellihrId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'person':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            id=id,
                                            displayName=displayName,
                                            emailAddresses=emailAddresses,
                                            employeeNumber=employeeNumber,
                                            autoIncrementIntellihrId=autoIncrementIntellihrId,
                                            link=link,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "job": job,
                                    "person": person,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["job"]) -> MetaOapg.properties.job: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["person"]) -> MetaOapg.properties.person: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["job", "person", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union[MetaOapg.properties.job, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["person"]) -> typing.Union[MetaOapg.properties.person, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["job", "person", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            job: typing.Union[MetaOapg.properties.job, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            person: typing.Union[MetaOapg.properties.person, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                job=job,
                                person=person,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'submitter':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class answers(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        
                                        
                                        class fieldId(
                                            schemas.StrSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                max_length = 36
                                                min_length = 36
                                        question = schemas.StrSchema
                                        
                                        
                                        class value(
                                            schemas.ComposedSchema,
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                
                                                class one_of_0(
                                                    schemas.ListSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        items = schemas.StrSchema
                                                
                                                    def __new__(
                                                        cls,
                                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                    ) -> 'one_of_0':
                                                        return super().__new__(
                                                            cls,
                                                            arg,
                                                            _configuration=_configuration,
                                                        )
                                                
                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                        return super().__getitem__(i)
                                                one_of_1 = schemas.NoneSchema
                                                
                                                @classmethod
                                                @functools.lru_cache()
                                                def one_of(cls):
                                                    # we need this here to make our import statements work
                                                    # we must store _composed_schemas in here so the code is only run
                                                    # when we invoke this method. If we kept this at the class
                                                    # level we would get an error because the class level
                                                    # code would be run when this module is imported, and these composed
                                                    # classes don't exist yet because their module has not finished
                                                    # loading
                                                    return [
                                                        cls.one_of_0,
                                                        cls.one_of_1,
                                                    ]
                                        
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'value':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        
                                        
                                        class label(
                                            schemas.ComposedSchema,
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                
                                                class one_of_0(
                                                    schemas.ListSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        items = schemas.StrSchema
                                                
                                                    def __new__(
                                                        cls,
                                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                    ) -> 'one_of_0':
                                                        return super().__new__(
                                                            cls,
                                                            arg,
                                                            _configuration=_configuration,
                                                        )
                                                
                                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                                        return super().__getitem__(i)
                                                one_of_1 = schemas.NoneSchema
                                                
                                                @classmethod
                                                @functools.lru_cache()
                                                def one_of(cls):
                                                    # we need this here to make our import statements work
                                                    # we must store _composed_schemas in here so the code is only run
                                                    # when we invoke this method. If we kept this at the class
                                                    # level we would get an error because the class level
                                                    # code would be run when this module is imported, and these composed
                                                    # classes don't exist yet because their module has not finished
                                                    # loading
                                                    return [
                                                        cls.one_of_0,
                                                        cls.one_of_1,
                                                    ]
                                        
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'label':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        __annotations__ = {
                                            "fieldId": fieldId,
                                            "question": question,
                                            "value": value,
                                            "label": label,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["fieldId"]) -> MetaOapg.properties.fieldId: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["question"]) -> MetaOapg.properties.question: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["fieldId", "question", "value", "label", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["fieldId"]) -> typing.Union[MetaOapg.properties.fieldId, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["question"]) -> typing.Union[MetaOapg.properties.question, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fieldId", "question", "value", "label", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    fieldId: typing.Union[MetaOapg.properties.fieldId, str, schemas.Unset] = schemas.unset,
                                    question: typing.Union[MetaOapg.properties.question, str, schemas.Unset] = schemas.unset,
                                    value: typing.Union[MetaOapg.properties.value, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                    label: typing.Union[MetaOapg.properties.label, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        fieldId=fieldId,
                                        question=question,
                                        value=value,
                                        label=label,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'answers':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def documentUploads() -> typing.Type['FormsDataDocumentUploads']:
                return FormsDataDocumentUploads
            
            
            class job(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class id(
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        max_length = 36
                                        min_length = 36
                                name = schemas.StrSchema
                                link = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                    "link": link,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "link", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "link", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                name=name,
                                link=link,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'job':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class person(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class id(
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        max_length = 36
                                        min_length = 36
                                displayName = schemas.StrSchema
                                
                                
                                class emailAddresses(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.AnyTypeSchema,
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    
                                                    
                                                    class email(
                                                        schemas.ComposedSchema,
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            one_of_0 = schemas.StrSchema
                                                            one_of_1 = schemas.NoneSchema
                                                            
                                                            @classmethod
                                                            @functools.lru_cache()
                                                            def one_of(cls):
                                                                # we need this here to make our import statements work
                                                                # we must store _composed_schemas in here so the code is only run
                                                                # when we invoke this method. If we kept this at the class
                                                                # level we would get an error because the class level
                                                                # code would be run when this module is imported, and these composed
                                                                # classes don't exist yet because their module has not finished
                                                                # loading
                                                                return [
                                                                    cls.one_of_0,
                                                                    cls.one_of_1,
                                                                ]
                                                    
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'email':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                                    isPrimary = schemas.BoolSchema
                                                    isPersonal = schemas.BoolSchema
                                                    __annotations__ = {
                                                        "email": email,
                                                        "isPrimary": isPrimary,
                                                        "isPersonal": isPersonal,
                                                    }
                                        
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["isPrimary"]) -> MetaOapg.properties.isPrimary: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["isPersonal"]) -> MetaOapg.properties.isPersonal: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "isPrimary", "isPersonal", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["isPrimary"]) -> typing.Union[MetaOapg.properties.isPrimary, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["isPersonal"]) -> typing.Union[MetaOapg.properties.isPersonal, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "isPrimary", "isPersonal", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                email: typing.Union[MetaOapg.properties.email, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                                isPrimary: typing.Union[MetaOapg.properties.isPrimary, bool, schemas.Unset] = schemas.unset,
                                                isPersonal: typing.Union[MetaOapg.properties.isPersonal, bool, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    email=email,
                                                    isPrimary=isPrimary,
                                                    isPersonal=isPersonal,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'emailAddresses':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class employeeNumber(
                                    schemas.ComposedSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        one_of_0 = schemas.StrSchema
                                        one_of_1 = schemas.NoneSchema
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def one_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                cls.one_of_0,
                                                cls.one_of_1,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'employeeNumber':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                autoIncrementIntellihrId = schemas.NumberSchema
                                link = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "displayName": displayName,
                                    "emailAddresses": emailAddresses,
                                    "employeeNumber": employeeNumber,
                                    "autoIncrementIntellihrId": autoIncrementIntellihrId,
                                    "link": link,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["emailAddresses"]) -> MetaOapg.properties.emailAddresses: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["autoIncrementIntellihrId"]) -> MetaOapg.properties.autoIncrementIntellihrId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "displayName", "emailAddresses", "employeeNumber", "autoIncrementIntellihrId", "link", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["emailAddresses"]) -> typing.Union[MetaOapg.properties.emailAddresses, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["autoIncrementIntellihrId"]) -> typing.Union[MetaOapg.properties.autoIncrementIntellihrId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "displayName", "emailAddresses", "employeeNumber", "autoIncrementIntellihrId", "link", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                            displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
                            emailAddresses: typing.Union[MetaOapg.properties.emailAddresses, list, tuple, schemas.Unset] = schemas.unset,
                            employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            autoIncrementIntellihrId: typing.Union[MetaOapg.properties.autoIncrementIntellihrId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                displayName=displayName,
                                emailAddresses=emailAddresses,
                                employeeNumber=employeeNumber,
                                autoIncrementIntellihrId=autoIncrementIntellihrId,
                                link=link,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    one_of_1 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'person':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "issueDate": issueDate,
                "dueDate": dueDate,
                "reminderDate": reminderDate,
                "accessCode": accessCode,
                "completedAt": completedAt,
                "formDesign": formDesign,
                "subject": subject,
                "respondent": respondent,
                "submitter": submitter,
                "answers": answers,
                "documentUploads": documentUploads,
                "job": job,
                "person": person,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueDate"]) -> MetaOapg.properties.issueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dueDate"]) -> MetaOapg.properties.dueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reminderDate"]) -> MetaOapg.properties.reminderDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessCode"]) -> MetaOapg.properties.accessCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completedAt"]) -> MetaOapg.properties.completedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formDesign"]) -> 'FormsDataFormDesign': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> 'FormsDataSubject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["respondent"]) -> MetaOapg.properties.respondent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submitter"]) -> MetaOapg.properties.submitter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["answers"]) -> MetaOapg.properties.answers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentUploads"]) -> 'FormsDataDocumentUploads': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job"]) -> MetaOapg.properties.job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["person"]) -> MetaOapg.properties.person: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "issueDate", "dueDate", "reminderDate", "accessCode", "completedAt", "formDesign", "subject", "respondent", "submitter", "answers", "documentUploads", "job", "person", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueDate"]) -> typing.Union[MetaOapg.properties.issueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dueDate"]) -> typing.Union[MetaOapg.properties.dueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reminderDate"]) -> typing.Union[MetaOapg.properties.reminderDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessCode"]) -> typing.Union[MetaOapg.properties.accessCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completedAt"]) -> typing.Union[MetaOapg.properties.completedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formDesign"]) -> typing.Union['FormsDataFormDesign', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union['FormsDataSubject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["respondent"]) -> typing.Union[MetaOapg.properties.respondent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submitter"]) -> typing.Union[MetaOapg.properties.submitter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["answers"]) -> typing.Union[MetaOapg.properties.answers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentUploads"]) -> typing.Union['FormsDataDocumentUploads', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union[MetaOapg.properties.job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["person"]) -> typing.Union[MetaOapg.properties.person, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "issueDate", "dueDate", "reminderDate", "accessCode", "completedAt", "formDesign", "subject", "respondent", "submitter", "answers", "documentUploads", "job", "person", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        issueDate: typing.Union[MetaOapg.properties.issueDate, str, schemas.Unset] = schemas.unset,
        dueDate: typing.Union[MetaOapg.properties.dueDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        reminderDate: typing.Union[MetaOapg.properties.reminderDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        accessCode: typing.Union[MetaOapg.properties.accessCode, str, schemas.Unset] = schemas.unset,
        completedAt: typing.Union[MetaOapg.properties.completedAt, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        formDesign: typing.Union['FormsDataFormDesign', schemas.Unset] = schemas.unset,
        subject: typing.Union['FormsDataSubject', schemas.Unset] = schemas.unset,
        respondent: typing.Union[MetaOapg.properties.respondent, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        submitter: typing.Union[MetaOapg.properties.submitter, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        answers: typing.Union[MetaOapg.properties.answers, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        documentUploads: typing.Union['FormsDataDocumentUploads', schemas.Unset] = schemas.unset,
        job: typing.Union[MetaOapg.properties.job, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        person: typing.Union[MetaOapg.properties.person, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FormsData':
        return super().__new__(
            cls,
            *args,
            id=id,
            issueDate=issueDate,
            dueDate=dueDate,
            reminderDate=reminderDate,
            accessCode=accessCode,
            completedAt=completedAt,
            formDesign=formDesign,
            subject=subject,
            respondent=respondent,
            submitter=submitter,
            answers=answers,
            documentUploads=documentUploads,
            job=job,
            person=person,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.forms_data_document_uploads import FormsDataDocumentUploads
from intelli_hr_python_sdk.model.forms_data_form_design import FormsDataFormDesign
from intelli_hr_python_sdk.model.forms_data_subject import FormsDataSubject
