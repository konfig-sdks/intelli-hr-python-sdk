# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class LeaveCreateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "jobId",
            "leaveType",
            "endDate",
            "startDate",
        }
        
        class properties:
            
            
            class jobId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 36
                    min_length = 36
            startDate = schemas.StrSchema
            endDate = schemas.StrSchema
        
            @staticmethod
            def leaveType() -> typing.Type['LeaveCreateRequestLeaveType']:
                return LeaveCreateRequestLeaveType
            fte = schemas.StrSchema
            __annotations__ = {
                "jobId": jobId,
                "startDate": startDate,
                "endDate": endDate,
                "leaveType": leaveType,
                "fte": fte,
            }
    
    jobId: MetaOapg.properties.jobId
    leaveType: 'LeaveCreateRequestLeaveType'
    endDate: MetaOapg.properties.endDate
    startDate: MetaOapg.properties.startDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaveType"]) -> 'LeaveCreateRequestLeaveType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fte"]) -> MetaOapg.properties.fte: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobId", "startDate", "endDate", "leaveType", "fte", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaveType"]) -> 'LeaveCreateRequestLeaveType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fte"]) -> typing.Union[MetaOapg.properties.fte, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobId", "startDate", "endDate", "leaveType", "fte", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        jobId: typing.Union[MetaOapg.properties.jobId, str, ],
        leaveType: 'LeaveCreateRequestLeaveType',
        endDate: typing.Union[MetaOapg.properties.endDate, str, ],
        startDate: typing.Union[MetaOapg.properties.startDate, str, ],
        fte: typing.Union[MetaOapg.properties.fte, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LeaveCreateRequest':
        return super().__new__(
            cls,
            *args,
            jobId=jobId,
            leaveType=leaveType,
            endDate=endDate,
            startDate=startDate,
            fte=fte,
            _configuration=_configuration,
            **kwargs,
        )

from intelli_hr_python_sdk.model.leave_create_request_leave_type import LeaveCreateRequestLeaveType
