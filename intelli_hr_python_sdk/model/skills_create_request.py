# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from intelli_hr_python_sdk import schemas  # noqa: F401


class SkillsCreateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "skillDisciplineId",
            "name",
            "description",
            "isBusinessCritical",
        }
        
        class properties:
            description = schemas.StrSchema
            name = schemas.StrSchema
            isBusinessCritical = schemas.BoolSchema
            
            
            class skillDisciplineId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 36
                    min_length = 36
            __annotations__ = {
                "description": description,
                "name": name,
                "isBusinessCritical": isBusinessCritical,
                "skillDisciplineId": skillDisciplineId,
            }
    
    skillDisciplineId: MetaOapg.properties.skillDisciplineId
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    isBusinessCritical: MetaOapg.properties.isBusinessCritical
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBusinessCritical"]) -> MetaOapg.properties.isBusinessCritical: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillDisciplineId"]) -> MetaOapg.properties.skillDisciplineId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "name", "isBusinessCritical", "skillDisciplineId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBusinessCritical"]) -> MetaOapg.properties.isBusinessCritical: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillDisciplineId"]) -> MetaOapg.properties.skillDisciplineId: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "name", "isBusinessCritical", "skillDisciplineId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        skillDisciplineId: typing.Union[MetaOapg.properties.skillDisciplineId, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        isBusinessCritical: typing.Union[MetaOapg.properties.isBusinessCritical, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SkillsCreateRequest':
        return super().__new__(
            cls,
            *args,
            skillDisciplineId=skillDisciplineId,
            name=name,
            description=description,
            isBusinessCritical=isBusinessCritical,
            _configuration=_configuration,
            **kwargs,
        )
