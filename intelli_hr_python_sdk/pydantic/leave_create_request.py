# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from intelli_hr_python_sdk.pydantic.leave_create_request_leave_type import LeaveCreateRequestLeaveType

class LeaveCreateRequest(BaseModel):
    # The identifier string for the [Job](https://developers.intellihr.io/docs/v1/) that this extended leave belongs to.
    job_id: str = Field(alias='jobId')

    # The date this [Extended Leave](https://developers.intellihr.io/docs/v1/) started or will start. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone.
    start_date: str = Field(alias='startDate')

    # The date this [Extended Leave](https://developers.intellihr.io/docs/v1/) is expected to end. Leave is created without a finalised return date. In order to create more than one Extended Leave on a Job, the end date must be finalised on the most recent created Extended Leave. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone.
    end_date: str = Field(alias='endDate')

    leave_type: LeaveCreateRequestLeaveType = Field(alias='leaveType')

    # The full time equivalent for this [Job](https://developers.intellihr.io/docs/v1/) if changing during this leave period.
    fte: typing.Optional[str] = Field(None, alias='fte')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
