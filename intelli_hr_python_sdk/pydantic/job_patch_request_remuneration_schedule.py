# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from intelli_hr_python_sdk.pydantic.job_patch_request_remuneration_schedule_additions import JobPatchRequestRemunerationScheduleAdditions
from intelli_hr_python_sdk.pydantic.job_patch_request_remuneration_schedule_additions_to_total import JobPatchRequestRemunerationScheduleAdditionsToTotal
from intelli_hr_python_sdk.pydantic.job_patch_request_remuneration_schedule_breakdowns import JobPatchRequestRemunerationScheduleBreakdowns
from intelli_hr_python_sdk.pydantic.job_patch_request_remuneration_schedule_custom_fields import JobPatchRequestRemunerationScheduleCustomFields
from intelli_hr_python_sdk.pydantic.job_patch_request_remuneration_schedule_employment_condition import JobPatchRequestRemunerationScheduleEmploymentCondition

class JobPatchRequestRemunerationSchedule(BaseModel):
    # The cycle that the job is paid on. Enum: `Weekly`, `Fortnightly`, `Monthly`, `Bi-Monthly`.
    pay_cycle: str = Field(alias='payCycle')

    # How many hours worked per payCycle.    Setting hours to 0 (zero) signifies that the hours are variable per pay cycle
    hours_per_cycle: typing.Union[int, float] = Field(alias='hoursPerCycle')

    # The method in which this remuneration schedule is paid. Enum: `Annual Salary`, `Hourly Rate`, `No Remuneration Schedule`.
    type: typing.Optional[str] = Field(None, alias='type')

    # The currency that the base and total amounts that this job is being paid in. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes).
    currency: typing.Optional[str] = Field(None, alias='currency')

    # WARNING: This property is deprecated
    employment_condition: typing.Optional[JobPatchRequestRemunerationScheduleEmploymentCondition] = Field(None, alias='employmentCondition')

    # The Base Salary paid yearly, this is only required if the Remuneration Schedule Type is \"Annual Salary\". Any number exceeding 8 decimal places will be rounded up.
    base_annual_salary: typing.Optional[typing.Union[int, float]] = Field(None, alias='baseAnnualSalary')

    # The Base Rate paid hourly, this is only required if the Remuneration Schedule Type is \"Hourly Rate\". Any number exceeding 8 decimal places will be rounded up.
    base_hourly_rate: typing.Optional[typing.Union[int, float]] = Field(None, alias='baseHourlyRate')

    additions: typing.Optional[JobPatchRequestRemunerationScheduleAdditions] = Field(None, alias='additions')

    additions_to_total: typing.Optional[JobPatchRequestRemunerationScheduleAdditionsToTotal] = Field(None, alias='additionsToTotal')

    breakdowns: typing.Optional[JobPatchRequestRemunerationScheduleBreakdowns] = Field(None, alias='breakdowns')

    custom_fields: typing.Optional[JobPatchRequestRemunerationScheduleCustomFields] = Field(None, alias='customFields')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
