# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from intelli_hr_python_sdk.pydantic.pay_grades_data_pay_grade_values import PayGradesDataPayGradeValues

class PayGradesData(BaseModel):
    # Description of the [Pay Grade](https://developers.intellihr.io/docs/v1/).
    description: typing.Optional[str] = Field(None, alias='description')

    # The identifier string for the [Pay Grade](https://developers.intellihr.io/docs/v1/).
    id: typing.Optional[str] = Field(None, alias='id')

    # Administrative, short code associated to the [Pay Grade](https://developers.intellihr.io/docs/v1/).
    code: typing.Optional[str] = Field(None, alias='code')

    # User friendly name given to the [Pay Grade](https://developers.intellihr.io/docs/v1/).
    name: typing.Optional[str] = Field(None, alias='name')

    # The date this [Pay Grade](https://developers.intellihr.io/docs/v1/) started or will start within the organisation. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone.
    start_date: typing.Optional[typing.Union[str, none_type]] = Field(None, alias='startDate')

    # The date this [Pay Grade](https://developers.intellihr.io/docs/v1/) ended or will end within the organisation.. This date will follow the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6).   YYYY-MM-DD date formatting is also supported, although by using this format the date will be stored as the start of day in UTC time, not the requesting tenants timezone.
    end_date: typing.Optional[typing.Union[str, none_type]] = Field(None, alias='endDate')

    # Specifies whether users can select this [Pay Grade](https://developers.intellihr.io/docs/v1/) in dropdowns.
    is_enabled: typing.Optional[bool] = Field(None, alias='isEnabled')

    # Number of [Jobs](https://developers.intellihr.io/docs/v1/) that have been assigned this [Pay Grade](https://developers.intellihr.io/docs/v1/) in dropdowns.
    active_jobs: typing.Optional[int] = Field(None, alias='activeJobs')

    # Allow this [Pay Grade](https://developers.intellihr.io/docs/v1/) value to be overwritten.
    is_overridable: typing.Optional[bool] = Field(None, alias='isOverridable')

    # Stores the hourly rate for permanent [Jobs](https://developers.intellihr.io/docs/v1/).
    permanent_hourly_rate: typing.Optional[typing.Union[typing.Union[int, float], none_type]] = Field(None, alias='permanentHourlyRate')

    # PayGrade Currency Object Model
    permanent_hourly_rate_currency: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = Field(None, alias='permanentHourlyRateCurrency')

    # Stores the hourly rate for casual [Jobs](https://developers.intellihr.io/docs/v1/).
    casual_hourly_rate: typing.Optional[typing.Union[typing.Union[int, float], none_type]] = Field(None, alias='casualHourlyRate')

    # PayGrade Currency Object Model
    casual_hourly_rate_currency: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = Field(None, alias='casualHourlyRateCurrency')

    # Stores the annual salary for [Jobs](https://developers.intellihr.io/docs/v1/).
    annual_salary: typing.Optional[typing.Union[typing.Union[int, float], none_type]] = Field(None, alias='annualSalary')

    # PayGrade Currency Object Model
    annual_salary_currency: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = Field(None, alias='annualSalaryCurrency')

    # The type of this [Pay Grade](https://developers.intellihr.io/docs/v1/)
    pay_grade_type: typing.Optional[Literal["FIXED", "STEP"]] = Field(None, alias='payGradeType')

    pay_grade_values: typing.Optional[PayGradesDataPayGradeValues] = Field(None, alias='payGradeValues')

    # The [User](https://developers.intellihr.io/docs/v1/) who last changed this [Pay Grade](https://developers.intellihr.io/docs/v1/)
    change_user: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = Field(None, alias='changeUser')

    # The [Employment Condition](https://developers.intellihr.io/docs/v1/) of this [Pay Grade](https://developers.intellihr.io/docs/v1/)
    employment_condition: typing.Optional[typing.Union[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]], none_type]] = Field(None, alias='employmentCondition')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
