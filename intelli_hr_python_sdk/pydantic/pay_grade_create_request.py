# coding: utf-8

"""
    intelliHR Public API

    You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

    The version of the OpenAPI document: V1
    Contact: support@intellihr.co
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from intelli_hr_python_sdk.pydantic.pay_grade_create_request_employment_condition import PayGradeCreateRequestEmploymentCondition
from intelli_hr_python_sdk.pydantic.pay_grade_create_request_pay_steps import PayGradeCreateRequestPaySteps

class PayGradeCreateRequest(BaseModel):
    # The name assigned to this [Pay Grade](https://developers.intellihr.io/docs/v1/).
    name: str = Field(alias='name')

    # Description of the [Pay Grade](https://developers.intellihr.io/docs/v1/).
    description: typing.Optional[str] = Field(None, alias='description')

    # Administrative, short code associated to the [Pay Grade](https://developers.intellihr.io/docs/v1/).
    code: typing.Optional[str] = Field(None, alias='code')

    employment_condition: typing.Optional[PayGradeCreateRequestEmploymentCondition] = Field(None, alias='employmentCondition')

    # The type of this [Pay Grade](https://developers.intellihr.io/docs/v1/). Enum: `FIXED` or `STEP`.
    pay_grade_type: typing.Optional[str] = Field(None, alias='payGradeType')

    # Allow this [Pay Grade](https://developers.intellihr.io/docs/v1/) value to be overwritten.
    is_overridable: typing.Optional[bool] = Field(None, alias='isOverridable')

    # Stores the hourly rate for permanent [Jobs](https://developers.intellihr.io/docs/v1/). These inputs will be ignored if you also pass in pay Step values.
    permanent_hourly_rate: typing.Optional[typing.Union[int, float]] = Field(None, alias='permanentHourlyRate')

    # The currency that the permanentHourlyRate is being paid in. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes).
    permanent_hourly_rate_currency: typing.Optional[str] = Field(None, alias='permanentHourlyRateCurrency')

    # Stores the hourly rate for casual [Jobs](https://developers.intellihr.io/docs/v1/). These inputs will be ignored if you also pass in pay Step values.
    casual_hourly_rate: typing.Optional[typing.Union[int, float]] = Field(None, alias='casualHourlyRate')

    # The currency that the casualHourlyRate is being paid in. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes).
    casual_hourly_rate_currency: typing.Optional[str] = Field(None, alias='casualHourlyRateCurrency')

    # Stores the annual salary for [Jobs](https://developers.intellihr.io/docs/v1/). These inputs will be ignored if you also pass in pay Step values.
    annual_salary: typing.Optional[typing.Union[int, float]] = Field(None, alias='annualSalary')

    # The currency that the annualSalary is being paid in. An international currency code. Typically AUD for Australian dollar, USD for American dollar etc. See [Official list of codes](https://www.iban.com/currency-codes).
    annual_salary_currency: typing.Optional[str] = Field(None, alias='annualSalaryCurrency')

    pay_steps: typing.Optional[PayGradeCreateRequestPaySteps] = Field(None, alias='paySteps')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
